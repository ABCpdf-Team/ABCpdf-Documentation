<html>
<head>
<title>Levels Effect</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../mystyles.css">
<link rel="stylesheet" href="../prism.css">
<script src="../prism.js"></script></head>

<body bgcolor="#FFFFFF">
<table border="0" cellpadding="0" cellspacing="4">
  <tr> 
    <td valign="top"><img src="../images/goo.gif" width="58" height="60"></td>
    <td width="14">&nbsp;</td>
    <td> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="pageheader"> Levels Effect</td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr> 
          <td background="../images/steel-line-3.gif" height="11"></td>
          <td background="../images/steel-line-3.gif" height="11" width="60"></td>
          <td height="11"><img src="../images/steel-blob-11.gif" width="11" height="11"></td>
        </tr>
        <tr> 
          <td> 
            <p>The Levels effect allows you fine control over brightness and contrast.</p>
          <p>&nbsp;</p>          </td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
    Settings</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td><table class="wsgtable" cellpadding="3" cellspacing="0" border="5" bordercolor="#FFFFFF">
              <tr>
                <td><b>Name</b></td>
                <td><b>Default</b></td>
                <td><b>Description</b></td>
              </tr>
              <tr valign="top">
                <td>Black Input</td>
                <td>0 %</td>
                <td><p>The level in the current image that should be regarded as 
                  black.</p></td>
              </tr>
              <tr valign="top">
                <td>White Input</td>
                <td>100 %</td>
                <td><p>The level in the current image that should be regarded as 
                  white.</p></td>
              </tr>
              <tr valign="top">
                <td>Black Output</td>
                <td>0 %</td>
                <td><p>The level in the final image that should be regarded as 
                  black.</p></td>
              </tr>
              <tr valign="top">
                <td>White Output</td>
                <td>100 %</td>
                <td><p>The level in the final image that should be regarded as 
                  white.</p></td>
              </tr>
            </table>
            <p>&nbsp;</p>
            </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
    Workings</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>Well defined images span an entire range of color intensities. 
              However it is common to find images that do not. If a photo has 
              been overexposed it will be too bright - there will be few colors 
              at the low ends of intensity and many at the high end. Similarly 
              if a photograph has been underexposed it will be very dark - all 
              the colors will be at the low end of the range and virtually none 
            at the high end.</p>
            <p>The Levels effect allows you fine control over brightness and contrast 
              to let you correct this kind of problem. The basic method of adjustment 
              is to set the black and white points on the input image. Normally 
              the black point will be at 0 and the white point at 255. This simply 
              means that black is represented by the value 0 and white is represented 
              by the value 255.</p>
            <p>However if an image is too dark there may be no pixels at all with 
              a value of 255. In this case what was white on the original image 
              might be represented by a value of only 200. By setting the white 
              input point to 200 and then applying the effect, the levels in between 
              will be stretched to try and restore balance to the image. A similar 
              operation setting the black input point would apply if an image 
              was too light.</p>
            <p>As well as being able to specify input points you can also specify 
              output points. This lets you tell the effect what value should be 
              regarded as white and black on the final output image.</p>
            <p>The levels effect is often used in conjunction with an image histogram 
              so that the exact representation of different color levels can be 
              seen in the image.</p>
          <p>&nbsp;</p>          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
    Example</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>The following example images show the effect of the Levels effect.</p>
            <p><span class=language>[C#]</span><br>
              <pre><code class="language-csharp">void function() {
&nbsp;&nbsp;using (Doc doc = new Doc()) {
&nbsp;&nbsp;&nbsp;&nbsp;AddImagePage(doc, img6); // original image
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevels.jpg");
&nbsp;&nbsp;&nbsp;&nbsp;using (ImageLayer layer = AddImagePage(doc, img6)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using (EffectOperation effect = new EffectOperation("Levels")) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters["White Input"].Value = 80;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsWI80.jpg");
&nbsp;&nbsp;&nbsp;&nbsp;using (ImageLayer layer = AddImagePage(doc, img6)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using (EffectOperation effect = new EffectOperation("Levels")) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters["Black Input"].Value = 20;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsBI20.jpg");
&nbsp;&nbsp;&nbsp;&nbsp;using (ImageLayer layer = AddImagePage(doc, img6)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using (EffectOperation effect = new EffectOperation("Levels")) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters["White Output"].Value = 80;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsWO80.jpg");
&nbsp;&nbsp;}
}
</code></pre><br>
              <span class=language>[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Sub ...
&nbsp;&nbsp;Using doc As New Doc()
&nbsp;&nbsp;&nbsp;&nbsp;AddImagePage(doc, img6)
&nbsp;&nbsp;&nbsp;&nbsp;' original image
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevels.jpg")
&nbsp;&nbsp;&nbsp;&nbsp;Using layer As ImageLayer = AddImagePage(doc, img6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using effect As New EffectOperation("Levels")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters("White Input").Value = 80
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsWI80.jpg")
&nbsp;&nbsp;&nbsp;&nbsp;Using layer As ImageLayer = AddImagePage(doc, img6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using effect As New EffectOperation("Levels")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters("Black Input").Value = 20
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsBI20.jpg")
&nbsp;&nbsp;&nbsp;&nbsp;Using layer As ImageLayer = AddImagePage(doc, img6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using effect As New EffectOperation("Levels")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters("White Output").Value = 80
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(layer.PixMap)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.Save("EffectLevelsWO80.jpg")
&nbsp;&nbsp;End Using
End Sub
</code></pre><br>
            </p>
            <table border="0" cellpadding="5" cellspacing="0" bordercolor="#999999">
              <tr>
                <td valign="top"><p><img src="images/bouy2.jpg" width="180" height="246"><br>
                  Original Image</p></td>
                <td valign="top"><p><img src="images/levels/wi200.jpg" width="180" height="246"><br>
                  White Input = 80</p></td>
              </tr>
              <tr>
                <td valign="top"><p><img src="images/levels/bi50.jpg" width="180" height="246"><br>
                  Black Input = 20</p></td>
                <td valign="top"><p><img src="images/levels/wo200.jpg" width="180" height="246"><br>
                  White Output = 80</p></td>
              </tr>
            </table>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
