<html>
<head>
<title>eForm FDF Example</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../mystyles.css">
<link rel="stylesheet" href="../prism.css">
<script src="../prism.js"></script></head>

<body bgcolor="#FFFFFF">
<table border="0" cellpadding="0" cellspacing="4">
  <tr> 
    <td valign="top"><img src="../images/goo.gif" width="58" height="60"></td>
    <td width="14">&nbsp;</td>
    <td> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="pageheader"> eForm FDF Example</td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr> 
          <td background="../images/steel-line-3.gif" height="11"></td>
          <td background="../images/steel-line-3.gif" height="11" width="60"></td>
          <td height="11"><img src="../images/steel-blob-11.gif" width="11" height="11"></td>
        </tr>
        <tr> 
          <td> 
            <p>This example shows how to extract Unicode annotation values from 
              an eForm FDF file.</p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Src</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>First we create an ABCpdf Doc object and read in our FDF file. 
            </p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">using var fdf = new Doc();
fdf.Read(Server.MapPath("../Rez/form.fdf"));
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Dim theFDF As New Doc()
theFDF.Read(Server.MapPath("../Rez/form.fdf"))
</code></pre></p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Dest</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>We find out how many items there are in the FDF file and prepare 
              to iterate through them.</p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">string theValues = "";
int lastID = Convert.ToInt32(fdf.GetInfo(0, "Count"));
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Dim theValues As String = ""
Dim theLastID As Integer = Convert.ToInt32(theFDF.GetInfo(0, "Count"))
</code></pre></p>
            <p>&nbsp;</p>
            </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Add</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>We go through each item. We check to see if it is an annotation. 
              If it is we check to see if the annotation type is text. If we have 
              found a text annotation we extract the content and add the value 
              to our list.</p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">// extract annotation values (for insertion into PDF)
for (int i = 0; i &lt;= lastID; i++) {
&nbsp;&nbsp;string theType = fdf.GetInfo(i, "Type");
&nbsp;&nbsp;if (theType == "anno") {
&nbsp;&nbsp;&nbsp;&nbsp;if (fdf.GetInfo(i, "SubType") == "Text") {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string theCont;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theCont = fdf.GetInfo(i, "Contents");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theValues = theValues + theCont + "\r\n\r\n";
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;}
}
// extract field values (for demonstration purposes)
for (int i = 0; i &lt;= lastID; i++) {
&nbsp;&nbsp;int theN = fdf.GetInfoInt(i, "/FDF*/Fields*:Count");
&nbsp;&nbsp;for (int j = 0; j &lt; theN; j++) {
&nbsp;&nbsp;&nbsp;&nbsp;string name = fdf.GetInfo(i, "/FDF*/Fields*[" + j + "]*/T:Text");
&nbsp;&nbsp;&nbsp;&nbsp;string value = fdf.GetInfo(i, "/FDF*/Fields*[" + j + "]*/V:Text");
&nbsp;&nbsp;&nbsp;&nbsp;// here we would do something with the field value we've found
&nbsp;&nbsp;}
}
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">' extract annotation values (for insertion into PDF)
Dim i As Integer = 0
While i &lt;= theLastID
&nbsp;&nbsp;Dim theType As String = theFDF.GetInfo(i, "Type")
&nbsp;&nbsp;If theType = "anno" Then
&nbsp;&nbsp;&nbsp;&nbsp;If theFDF.GetInfo(i, "SubType") = "Text" Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim theCont As String
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theCont = theFDF.GetInfo(i, "Contents")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theValues = theValues + theCont + vbCr &amp; vbLf &amp; vbCr &amp; vbLf
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;End If
&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
End While
' extract field values (for demonstration purposes)
Dim i As Integer = 0
While i &lt;= theLastID
&nbsp;&nbsp;Dim [theN] As Integer = theFDF.GetInfoInt(i, "/FDF*/Fields*:Count")
&nbsp;&nbsp;Dim j As Integer = 0
&nbsp;&nbsp;While j &lt; [theN]
&nbsp;&nbsp;&nbsp;&nbsp;Dim theName As String = theFDF.GetInfo(i, "/FDF*/Fields*[" + j + "]*/T:Text")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' here we would do something with the field value we've found
&nbsp;&nbsp;&nbsp;&nbsp;Dim theValue As String = theFDF.GetInfo(i, "/FDF*/Fields*[" + j + "]*/V:Text")
&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(j),j - 1)
&nbsp;&nbsp;End While
&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
End While
</code></pre></p>
            <p>&nbsp;</p>
            </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Save</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>Finally we add the Unicode text to a new document and save it. 
            </p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">using var doc = new Doc();
doc.Font = doc.EmbedFont("Arial", LanguageType.Unicode, false, true);
doc.FontSize = 96;
doc.Rect.Inset(10, 10);
doc.AddText(theValues);
doc.Save(Server.MapPath("fdf.pdf"));
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Using doc As New Doc()
&nbsp;&nbsp;doc.Font = doc.EmbedFont("Arial", LanguageType.Unicode, False, True)
&nbsp;&nbsp;doc.FontSize = 96
&nbsp;&nbsp;doc.Rect.Inset(10, 10)
&nbsp;&nbsp;doc.AddText(theValues)
&nbsp;&nbsp;doc.Save(Server.MapPath("fdf.pdf"))
End Using
</code></pre> </p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Results</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>This is the kind of PDF you might expect to produce.</p>
            <p><img src="../images/pdf/fdf.pdf.png" class="example"><br>
              fdf.pdf</p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
