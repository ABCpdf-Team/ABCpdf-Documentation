<html>
<head>
<title>Small Table Example</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../mystyles.css">
<link rel="stylesheet" href="../prism.css">
<script src="../prism.js"></script></head>

<body bgcolor="#FFFFFF">
<table border="0" cellpadding="0" cellspacing="4">
  <tr> 
    <td valign="top"><img src="../images/goo.gif" width="58" height="60"></td>
    <td width="14">&nbsp;</td>
    <td> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td class="pageheader"> Small Table Example</td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr> 
          <td background="../images/steel-line-3.gif" height="11"></td>
          <td background="../images/steel-line-3.gif" height="11" width="60"></td>
          <td height="11"><img src="../images/steel-blob-11.gif" width="11" height="11"></td>
        </tr>
        <tr> 
          <td> 
            <p>This example shows how to draw a single page table. ABCpdf does 
              not provide table drawing routines itself so this example uses a 
              Table Class to position the table elements.</p>
            <p>You can find the full project and classes under the ABCpdf menu 
              item. The project includes code for laying out a small table, a 
              large table spreading over more than one page, an invoice and a 
              product list.</p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Setup</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>We start by creating our document object and reading the data for 
              our table. For the purposes of this example we'll assume that our 
              data is in a standard tab delimited format.</p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">string text = File.ReadAllText(Server.MapPath("text6.txt"));
using var doc = new Doc();
// set up document
doc.FontSize = 16;
doc.Rect.Inset(20, 20);
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Dim theText As String = File.ReadAllText(Server.MapPath("text6.txt"))
Using doc As New Doc()
&nbsp;&nbsp;' set up document
&nbsp;&nbsp;doc.FontSize = 16
&nbsp;&nbsp;doc.Rect.Inset(20, 20)
</code></pre></p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Rotate</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>We create a new table object passing in values to tell it what 
              rectangle it can occupy (it takes the current document rectangle) 
              and how many columns of data it should be prepared for. </p>
            <p>Columns are assigned relative widths and expand horizontally to 
              fit the table rectangle. Here we're specifying five columns.</p>
            <p>Most of our columns will be right aligned so we set the default 
              horizontal alignment to 1.</p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">var table = new PDFTable(doc, 5);
table.CellPadding = 5;
table.HorizontalAlignment = 1;
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">&nbsp;&nbsp;Dim theTable As New PDFTable(doc, 5)
&nbsp;&nbsp;theTable.CellPadding = 5
&nbsp;&nbsp;theTable.HorizontalAlignment = 1
</code></pre></p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Add</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>We iterate through the table data adding rows as we go. We override 
              the right alignment for the first column and we shade alternating 
              rows using a light gray color. Finally we frame the table and save 
              the document.</p>
            <p><span class="language">[C#]</span><br>
              <pre><code class="language-csharp">text = text.Trim();
text = text.Replace("\r\n", "\r");
string[] theRows = text.Split(new char[] { '\r' });

for (int i = 0; i &lt; theRows.Length; i++) {
&nbsp;&nbsp;table.NextRow();
&nbsp;&nbsp;string[] theCols = theRows[i].Split(new char[] { '\t' });
&nbsp;&nbsp;theCols[0] = "&lt;stylerun hpos=0&gt;" + theCols[0] + "&lt;/stylerun&gt;";
&nbsp;&nbsp;table.AddTextStyled(theCols);
&nbsp;&nbsp;if ((i % 2) == 1)
&nbsp;&nbsp;&nbsp;&nbsp;table.FillRow("220 220 220", i);
}
table.Frame();

doc.Flatten();
doc.Save(Server.MapPath("table1.pdf"));
</code></pre><br>
              <span class="language">[Visual Basic]</span><br>
              <pre><code class="language-vbnet">&nbsp;&nbsp;theText = theText.Trim()
&nbsp;&nbsp;theText = theText.Replace(vbCr &amp; vbLf, vbCr)
&nbsp;&nbsp;Dim theRows As String() = theText.Split(New Char() {ControlChars.Cr})

&nbsp;&nbsp;Dim i As Integer = 0
&nbsp;&nbsp;While i &lt; theRows.Length
&nbsp;&nbsp;&nbsp;&nbsp;theTable.NextRow()
&nbsp;&nbsp;&nbsp;&nbsp;Dim theCols As String() = theRows(i).Split(New Char() {ControlChars.Tab})
&nbsp;&nbsp;&nbsp;&nbsp;theCols(0) = "&lt;stylerun hpos=0&gt;" + theCols(0) + "&lt;/stylerun&gt;"
&nbsp;&nbsp;&nbsp;&nbsp;theTable.AddTextStyled(theCols)
&nbsp;&nbsp;&nbsp;&nbsp;If (i Mod 2) = 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theTable.FillRow("220 220 220", i)
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
&nbsp;&nbsp;End While
&nbsp;&nbsp;theTable.Frame()

&nbsp;&nbsp;doc.Flatten()
&nbsp;&nbsp;doc.Save(Server.MapPath("table1.pdf"))
End Using
</code></pre></p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
  <tr> 
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>Results</td>
    <td width="14">&nbsp;</td>
    <td valign="top"> 
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr> 
          <td> 
            <p>Using the following input data:</p>
            <p><samp>Planet Distance From Sun (miles) Diameter (miles) Year Length 
              (days) Day Length (days)<br>
              Mercury 36,000,000 3,030 88 58.00<br>
              Venus 67,000,000 7,520 225 225.00<br>
              Earth 93,000,000 7,925 365 1.00<br>
              Mars 142,000,000 4,210 687 1.00<br>
              Jupiter 484,000,000 88,730 4,344 0.40<br>
              Saturn 888,000,000 74,975 10,768 0.40<br>
              Uranus 1,800,000,000 31,760 30,660 0.70<br>
              Neptune 2,800,000,000 30,600 60,150 0.65<br>
              Pluto 3,600,000,000 1,410 90,520 0.25</samp><br>
            </p>
            <p>We get the following output.</p>
            <p><img src="../images/pdf/table1.pdf.png" class="example"><br>
              table1.pdf</p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
