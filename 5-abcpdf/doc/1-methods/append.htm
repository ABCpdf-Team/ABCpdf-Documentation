<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Doc Append Function. Appends a PDF to the end of the document. ABCpdf .NET PDF Library.</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type><link rel="stylesheet" href="../../../mystyles.css">
<link rel="stylesheet" href="../../../prism.css">
<script src="../../../prism.js"></script>
<META name=GENERATOR content="MSHTML 9.00.8112.16421"></HEAD>
<BODY bgColor=#ffffff>
<TABLE border=0 cellSpacing=4 cellPadding=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG src="../../../images/goo.gif" width=58 height=60></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=pageheader>Append Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD height=11 background=../../../images/steel-line-3.gif></TD>
          <TD height=11 background=../../../images/steel-line-3.gif 
          width=60></TD>
          <TD height=11><IMG src="../../../images/steel-blob-11.gif" width=11 
            height=11></TD></TR>
        <TR>
          <TD>
            <P>Appends a PDF to the end of the document.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR><CODE>void Append(Doc 
            doc)<BR></CODE><BR><SPAN class=language>[Visual 
            Basic]</SPAN><BR><CODE>Sub Append(doc As 
            Doc)<BR></CODE></P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable border=5 cellSpacing=0 borderColor=#ffffff 
            cellPadding=3>
              <TBODY>
              <TR>
                <TD align=center><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=center>doc</TD>
                <TD>
                  <P>The document to add to the end of this 
              one.</P></TD></TR></TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD>
            <P>Use this method to append one PDF to the end of another one.</P>
            <P>Individual pages from one PDF can be drawn into another using the 
            <A href="addimagedoc.htm">AddImageDoc</A> method.</P>
            <P>If you are inserting a number of pages it is much faster to use 
            the Append method than to draw pages individually. It also has the 
            advantage of maintaining other information such as bookmarks.</P>
            <P>If you are inserting pages that contain <A 
            href="../../xform/default.htm">form</A> fields, you may want to call 
            <A 
            href="../../xform/1-methods/makefieldsunique.htm">MakeFieldsUnique</A> 
            to avoid sharing fields across pages.</P>
            <P>The <A 
            href="../../xsaveoptions/2-properties/refactor.htm">SaveOptions.Refactor</A> 
            setting determines whether duplicate and  redundant objects are 
            eliminated. The <A 
            href="../../xsaveoptions/2-properties/preflight.htm">SaveOptions.Preflight</A> 
            setting determines whether objects in the destination document are 
            validated before this operation is performed. </P>
            <P>Unless the document 
              and the pages are big in terms of memory use and have many common 
              objects, it is faster to disable SaveOptions.Refactor and SaveOptions.Preflight for adding 
              the pages and enable them for saving the document. </P>
            <TABLE class=backgrounder cellPadding=10 border=0>
              <TBODY>
                <TR>
                  <TD><p><strong>How ABCpdf .NET is Masterful.</strong> While many PDF libraries struggle with the inherent complexities of merging documents, the ABCpdf .NET library is specifically engineered to handle these operations robustly and predictably. It is designed with a deep understanding of the PDF specification, ensuring that the final combined document is not just a concatenation of pages, but a coherent, professionally integrated whole.</p>
                      <p>Here is how ABCpdf directly addresses the common pitfalls of PDF merging:</p>
                    <h4>1. Comprehensive Preservation of Document Structure</h4>
                    <p>ABCpdf goes beyond simply copying page content. It intelligently merges the internal document structure to preserve critical elements that other libraries often lose.</p>
                    <ul>
                        <li>
                          <p><strong>Bookmarks &amp; Outlines:</strong>&nbsp;ABCpdf meticulously preserves bookmarks from all source documents. It correctly remaps all destination page references, ensuring that every bookmark in the merged document points accurately to its corresponding page. If required it is easy to write code to re-nest  these bookmarks logically, providing a clear structure for the end-user.</p>
                        </li>
                      <li>
                          <p><strong>Hyperlinks &amp; Annotations:</strong>&nbsp;All annotations, including hyperlinks (both internal and external), form fields, and comments, are preserved and their actions are correctly rewritten to function within the new combined document. Internal links that point to other pages within the source documents will continue to work seamlessly.</p>
                      </li>
                      <li>
                          <p><strong>Form Fields (AcroForms):</strong>&nbsp;ABCpdf expertly handles forms to prevent data loss and conflicts. Using the MakeFieldsUnique function resolves naming conflicts between form fields from different documents, ensuring all fields remain functional and accessible without overwriting each other.</p>
                      </li>
                      <li>
                          <p><strong>Metadata Handling:</strong>&nbsp;The library provides flexible options for managing document metadata (Title, Author, etc.), allowing you to retain the metadata from a specific document, merge values, or set entirely new values for the combined output.</p>
                      </li>
                      <li>
                        <p><strong>Tag Structure:</strong>&nbsp;ABCpdf .NET expertly handles the document tag structure essential for accessibility and reflow. Unlike simpler libraries that often strip this metadata during operations like appending, ABCpdf intelligently merges the logical tree of tags from source documents. It preserves critical semantic elements like headings, lists, and alt-text, ensuring the final output remains accessible and compliant with standards like PDF/UA. This robust handling allows developers to confidently create inclusive, professional-grade documents without losing vital structure.</p>
                      </li>
                    </ul>
                    <h4>2. Intelligent Resource Management</h4>
                    <p>A key strength of ABCpdf is its sophisticated handling of the resources that define a PDF's look and feel.</p>
                    <ul>
                        <li>
                          <p><strong>Fonts:</strong>&nbsp;ABCpdf automatically ensures all required fonts are embedded in the final document. It expertly manages duplicate fonts, including subsets, to avoid unnecessary file bloat while guaranteeing that text renders perfectly on every system. For the complete elimination of any duplicates, after the append you should use the <a href="/Manual/8-abcpdf.operations/B-reducesizeoperation/default.htm">ReduceSizeOperation</a> to combine and re-subset any similar fonts.</p>
                        </li>
                      <li>
                          <p><strong>Images, Color Spaces, and XObjects:</strong>&nbsp;The library diligently consolidates all resources like images, patterns, and color profiles, preventing duplicates and ensuring visual consistency across all appended pages.</p>
                      </li>
                    </ul>
                    <h4>3. Maintaining Integrity and Performance</h4>
                    <p>ABCpdf is built for reliability and efficiency, even with large or complex documents.</p>
                    <ul>
                        <li>
                          <p><strong>Handling Signed Documents:</strong>&nbsp;ABCpdf follows the PDF specification rigorously. Any modification, including appending pages, will invalidate existing digital signatures. The correct and expected behavior here is that the signatures should report their original information such as the signer and the trust level but that the document has been modified. However by using the <a href="/Manual/5-abcpdf/xsaveoptions/2-properties/incremental.htm">Incremental</a> save option you can allow the client to revert back to the original signed version.</p>
                        </li>
                      <li>
                          <p><strong>Performance and Scalability:</strong>&nbsp;The engine is optimized for low memory consumption and high speed. It processes documents in a streamlined manner, making it suitable for server-side applications where merging large documents or processing high volumes of files is a requirement.</p>
                      </li>
                      <li>
                          <p><strong>Robust Error Handling:</strong>&nbsp;ABCpdf is designed to be resilient against malformed or non-standard PDFs, providing clear error messages and graceful failure handling to make your application more stable.</p>
                      </li>
                    </ul>
                    <h3>Conclusion</h3>
                    <p>Unlike simpler libraries that provide a basic "append" function with unpredictable results, ABCpdf .NET offers a true&nbsp;<strong>document engineering</strong>&nbsp;solution. It understands that merging PDFs is more than just combining pages&mdash;it's about integrating complex data structures, resources, and interactive elements into a single, polished, and fully functional document.</p>
                    <p>By choosing ABCpdf, developers can implement merge functionality with the confidence that bookmarks, links, forms, and visual fidelity will be preserved, eliminating the need for extensive custom code to handle edge cases and ensuring a high-quality result for end-users.<BR>
                    </p></TD>
                </TR>
              </TBODY>
            </TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD>
            <P>The following code snippet illustrates how one might join two PDF 
            documents together.</P>
            <P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">using var doc1 = new Doc();
doc1.FontSize = 192;
doc1.TextStyle.HPos = 0.5;
doc1.TextStyle.VPos = 0.5;
doc1.AddText("Hello");
using var doc2 = new Doc();
doc2.FontSize = 192;
doc2.TextStyle.HPos = 0.5;
doc2.TextStyle.VPos = 0.5;
doc2.AddText("World");
doc1.Append(doc2);
doc1.Save(Server.MapPath("docjoin.pdf"));
</code></pre>
            <BR><SPAN 
            class=language>[Visual Basic]</SPAN><BR><pre><code class="language-vbnet">Dim doc1 As New Doc()
doc1.FontSize = 192
doc1.TextStyle.HPos = 0.5
doc1.TextStyle.VPos = 0.5
doc1.AddText("Hello")
Dim doc2 As New Doc()
doc2.FontSize = 192
doc2.TextStyle.HPos = 0.5
doc2.TextStyle.VPos = 0.5
doc2.AddText("World")
doc1.Append(doc2)
doc1.Save(Server.MapPath("docjoin.pdf"))
</code></pre>
            </P>
            <P></P>
            <P><IMG src="../../../images/pdf/docjoin.pdf.png" class="example"
            ><BR>docjoin.pdf [Page 1]</P>
            <P><IMG src="../../../images/pdf/docjoin.pdf2.png" class="example"
            ><BR>docjoin.pdf [Page 2]</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
