<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Doc SetInfo Function. Sets information about an object. ABCpdf .NET PDF Library.</TITLE>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type><link rel="stylesheet" href="../../../mystyles.css">
<link rel="stylesheet" href="../../../prism.css">
<script src="../../../prism.js"></script>
<META name=GENERATOR content="MSHTML 8.00.6001.18702"></HEAD>
<BODY bgColor=#ffffff>
<TABLE border=0 cellSpacing=4 cellPadding=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG src="../../../images/goo.gif" width=58 height=60></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD class=pageheader>SetInfo Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD height=11 background=../../../images/steel-line-3.gif></TD>
          <TD height=11 background=../../../images/steel-line-3.gif 
          width=60></TD>
          <TD height=11><IMG src="../../../images/steel-blob-11.gif" width=11 
            height=11></TD></TR>
        <TR>
          <TD>
            <P>Sets information about an object.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR><CODE>void 
            SetInfo(int id, string type, string info)<BR>void 
            SetInfo(int id, string type, int info)<BR>void 
            SetInfo(int id, string type, double info)<BR>void 
            SetInfo(int id, string type, DateTime info)<br>
            void 
            SetInfo(int id, string type, bool info)</CODE><BR><SPAN 
            class=language>[Visual Basic]</SPAN><BR><CODE>Sub SetInfo(id As Integer, type As String, info As 
            String)<BR>Sub SetInfo(id As Integer, type As String,
            info As Integer)<BR>Sub SetInfo(id As Integer, type
            As String, info As Double)<BR>Sub SetInfo(id As
            Integer, type As String, info As DateTime)<br>
            Sub SetInfo(id As
            Integer, type As String, info As Boolean)</CODE></P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable border=5 cellSpacing=0 borderColor=#ffffff 
            cellPadding=3>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>id</TD>
                <TD>
                  <P>The Object ID of the object to be modified.</P></TD></TR>
              <TR vAlign=top>
                <TD align=middle>type</TD>
                <TD>
                  <P>The type of value to insert.</P></TD></TR>
              <TR vAlign=top>
                <TD align=middle>info</TD>
                <TD>The value to insert.<BR>&bull;&nbsp;The overloads taking integer/floating-point
                info converts this parameter to the string representation (numbers
                as used in PDF) in the invariant culture without creating a managed
                string object.<BR>&bull;&nbsp;The overload taking DateTime info converts this
                parameter to the string representation (PDF date string) so it
                is mostly used with the <A href="../../../3-concepts/2-objectpaths.htm">:Text</A>
                object type.</TD></TR></TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD>
            <P>In the same way as you can get information about aspects of a 
            document using the <A href="getinfo.htm">GetInfo</A> method you can 
            modify aspects of the document using the SetInfo method.</P>
            <P>Different types of object support different types of properties. 
            For more detailed information see the <A 
            href="../../../3-concepts/2-objectpaths.htm">Object Paths</A> section 
            of this document.</P>
            <P>PDF objects are case sensitive so be sure you use the correct 
            case.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG src="../../../images/steel-pin.gif" 
      width=64 height=10><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE border=0 cellSpacing=0 cellPadding=0 width="100%">
        <TBODY>
        <TR>
          <TD>
            <P>The following shows how to modify the document catalog to ensure 
            that the PDF opens onto the second page rather than the first.</P>
            <P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">using var doc = new Doc();
doc.Read(Server.MapPath("../mypics/sample.pdf"));
int pages = doc.GetInfoInt(doc.Root, "Pages");
int page2 = doc.GetInfoInt(pages, "Page 2");
string action = $"[ {page2} 0 R /Fit ]";
doc.SetInfo(doc.Root, "/OpenAction", action);
doc.Save(Server.MapPath("docsetinfo.pdf"));
</code></pre><BR><SPAN 
            class=language>[Visual Basic]</SPAN><BR><pre><code class="language-vbnet">Using doc As New Doc()
&nbsp;&nbsp;doc.Read(Server.MapPath("../mypics/sample.pdf"))
&nbsp;&nbsp;Dim thePages As Integer = doc.GetInfoInt(doc.Root, "Pages")
&nbsp;&nbsp;Dim thePage2 As Integer = doc.GetInfoInt(thePages, "Page 2")
&nbsp;&nbsp;Dim theAction As String = $"[ {thePage2} 0 R /Fit ]"
&nbsp;&nbsp;doc.SetInfo(doc.Root, "/OpenAction", theAction)
&nbsp;&nbsp;doc.Save(Server.MapPath("docsetinfo.pdf"))
End Using
</code></pre></P>
            <TABLE class=backgrounder border=0 cellPadding=10>
              <TBODY>
              <TR>
                <TD>
                  <P><B>Open Actions. </B>The way in which a PDF is displayed 
                  when opened is dependent on certain flags within the PDF 
                  itself. Here are some common combinations. For full details of 
                  how these work you should see the Adobe PDF Specification 
                  available from the Adobe web site.</P>
                  <P>To show outlines:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo(theDoc.Root, "/PageMode", "/UseOutlines")
</code></pre></P>
                  <P>Or for thumbnails:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo theDoc.Root, "/PageMode", "/UseThumbs"
</code></pre></P>
                  <P>To display two pages side by side:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo(theDoc.Root, "/PageLayout", "/TwoColumnLeft")
</code></pre></P>
                  <P>To make the print dialog appear when the document is 
                  opened:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo(theDoc.Root, "/OpenAction", "&lt;&lt; /Type /Action /S /Named /N /Print &gt;&gt;")
</code></pre></P>
                  <P>To open at 200% zoom onto the current page:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo(theDoc.Root, "/OpenAction", "[ " + theDoc.Page.ToString() +" 0 R /XYZ null null 2 ]")
</code></pre></P>
                  <P>To fit the document width onto the current page:</P>
                  <P><pre><code class="language-generic">theDoc.SetInfo(theDoc.Root, "/OpenAction", "[ " + theDoc.Page.ToString() + " 0 R /FitH " + theDoc.MediaBox.Height.ToString() + " ]")
</code></pre><BR></P></TD></TR></TBODY></TABLE>
            <p>Also see example code in: <a href="../../../4-examples/08-landscape.htm">ABCpdf Landscape Example</a>, <a href="../../../4-examples/18-annotations.htm">ABCpdf Fields, Markup and Movies Example</a>, <a href="addobject.htm">Doc AddObject Function</a>, <a href="../2-properties/colorspace.htm">Doc ColorSpace Property</a>, <a href="../../../6-abcpdf.objects/filespecification/1-methods/filespecification.htm">FileSpecification FileSpecification Function</a>, <a href="../../../7-abcpdf.atoms/opatom/1-methods/find.htm">OpAtom Find Function</a>, <a href="../../../8-abcpdf.operations/4-xpsimportoperation/1-methods/import.htm">XpsImportOperation Import Function</a>.</p>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
