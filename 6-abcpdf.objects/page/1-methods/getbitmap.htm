<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Page GetBitmap Function. Render one or more layers on the current page. ABCpdf .NET PDF Library.</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="../../../mystyles.css">
<link rel="stylesheet" href="../../../prism.css">
<script src="../../../prism.js"></script>
<META content="MSHTML 6.00.6000.16809" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=4 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG height=60 src="../../../images/goo.gif" width=58></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=pageheader>GetBitmap Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD background=../../../images/steel-line-3.gif height=11></TD>
          <TD width=60 background=../../../images/steel-line-3.gif 
          height=11></TD>
          <TD height=11><IMG height=11 src="../../../images/steel-blob-11.gif" 
            width=11></TD></TR>
        <TR>
          <TD>
            <P>Render one or more layers on the current page</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR>
            <CODE>System.Drawing.Bitmap GetBitmap(Layer[] layers)<BR>
            </CODE><BR><SPAN class=language>[Visual 
            Basic]</SPAN><BR>
            <CODE>Function GetBitmap(layers() As Layer) As System.Drawing.Bitmap<BR>
            </CODE></P>
            <P><CODE><IMG height=10 alt="Throws Exceptions" 
            src="../../../images/steel-blob-10.gif" width=10 border=0> may throw 
            Exception()</CODE></P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable borderColor=#ffffff cellSpacing=0 
            cellPadding=3 border=5>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>layers</TD>
                <TD>The layers to be rendered.</TD>
              </TR>
              <TR vAlign=top>
                <TD align=middle>return</TD>
                <TD>The System.Drawing.Bitmap containing the image of the layers.</TD>
              </TR>
</TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>Render one or more layers on the current page.</P>
            <P> This function renders a set of layers and returns the result as a System.Drawing.Bitmap. The Bitmap covers the smallest possible area which encompasses all the layers provided.</P>
            <P>If this Page is not in a Doc then an exception will be raised. The function will return null if the layers argument is null or empty or the output Bitmap would be smaller than one pixel in area.</P>
            <P>Rendering options such as resolution are taken directly from the current <a href="../../../5-abcpdf/doc/2-properties/rendering.htm">Doc.Rendering</a> settings. However automatic page rotation (XRendering.AutoRotate) is disabled so that a Layer can be rendered and then re-inserted into the page as a raster copy of itself.</P>
            <P>Note that a layer can exist on multiple pages and indeed can be rendered in the context of a page that does not currently contain it. However layers typically contain references to named resources which are only available in the context of a specific page. So rendering a layer in the context of a page which does not normally contain it is prone to error unless the page and layer have been specifically constructed to allow this.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
            <TD>
                <P>The following example shows how to use this method to generate various types of drop shadows.</P>
                <P>
                    <span class=language>[C#]</span><br>
                    <pre><code class="language-csharp">using var doc = new Doc();
// light blue background
doc.Color.SetCmyk(50, 0, 0, 0);
doc.FillRect();
doc.Color.SetRgb(0, 0, 0);
doc.Rect.Inset(20, 20);
doc.Rect.Pin = XRect.Corner.TopLeft;
doc.Rect.Height = doc.Rect.Height / 5;
// set up styles
doc.TextStyle.Size = 72;
double shift = doc.TextStyle.Size * 0.1;
var pink = new XColor();
pink.SetRgb(255, 128, 128);
var gray = new XColor();
gray.SetRgb(128, 128, 128);
var blue = new XColor();
blue.SetRgb(0, 0, 255);
// add text content
AddDropShadow(doc, doc.AddText("Sharp Shadow"), 0, shift, -shift, gray);
doc.Rect.Move(0, -doc.Rect.Height);
AddDropShadow(doc, doc.AddText("Blurred Shadow"), 1, shift, -shift, gray);
doc.Rect.Move(0, -doc.Rect.Height);
AddDropShadow(doc, doc.AddText("Pink Shadow"), 1, shift, -shift, pink);
doc.Rect.Move(0, -doc.Rect.Height);
// add drawn content
doc.Transform.Magnify(0.5, 0.5, 0, 0);
doc.Transform.Translate(50, 0);
string star = "124 158 300 700 476 158 15 493 585 493 124 158";
doc.Width = 20;
doc.Color.String = "255 0 0";
AddDropShadow(doc, doc.AddPoly(star, false), 3, shift, -shift, blue);
doc.Save(Server.MapPath("dropshadows.pdf"));
</code></pre><br>
                    <span class=language>[Visual Basic]</span><br>
                    <pre><code class="language-vbnet">Using doc As New Doc()
&nbsp;&nbsp;' light blue background
&nbsp;&nbsp;doc.Color.SetCmyk(50, 0, 0, 0)
&nbsp;&nbsp;doc.FillRect()
&nbsp;&nbsp;doc.Color.SetRgb(0, 0, 0)
&nbsp;&nbsp;doc.Rect.Inset(20, 20)
&nbsp;&nbsp;doc.Rect.Pin = XRect.Corner.TopLeft
&nbsp;&nbsp;doc.Rect.Height = doc.Rect.Height / 5
&nbsp;&nbsp;' set up styles
&nbsp;&nbsp;doc.TextStyle.Size = 72
&nbsp;&nbsp;Dim shift As Double = doc.TextStyle.Size * 0.1
&nbsp;&nbsp;Dim pink As New XColor()
&nbsp;&nbsp;pink.SetRgb(255, 128, 128)
&nbsp;&nbsp;Dim gray As New XColor()
&nbsp;&nbsp;gray.SetRgb(128, 128, 128)
&nbsp;&nbsp;Dim blue As New XColor()
&nbsp;&nbsp;blue.SetRgb(0, 0, 255)
&nbsp;&nbsp;' add text content
&nbsp;&nbsp;AddDropShadow(doc, doc.AddText("Sharp Shadow"), 0, shift, -shift, gray)
&nbsp;&nbsp;doc.Rect.Move(0, -doc.Rect.Height)
&nbsp;&nbsp;AddDropShadow(doc, doc.AddText("Blurred Shadow"), 1, shift, -shift, gray)
&nbsp;&nbsp;doc.Rect.Move(0, -doc.Rect.Height)
&nbsp;&nbsp;AddDropShadow(doc, doc.AddText("Pink Shadow"), 1, shift, -shift, pink)
&nbsp;&nbsp;doc.Rect.Move(0, -doc.Rect.Height)
&nbsp;&nbsp;' add drawn content
&nbsp;&nbsp;doc.Transform.Magnify(0.5, 0.5, 0, 0)
&nbsp;&nbsp;doc.Transform.Translate(50, 0)
&nbsp;&nbsp;Dim star As String = "124 158 300 700 476 158 15 493 585 493 124 158"
&nbsp;&nbsp;doc.Width = 20
&nbsp;&nbsp;doc.Color.String = "255 0 0"
&nbsp;&nbsp;AddDropShadow(doc, doc.AddPoly(star, False), 3, shift, -shift, blue)
&nbsp;&nbsp;doc.Save(Server.MapPath("dropshadows.pdf"))
End Using
</code></pre>
                </P>
                <P>The code above utilises the following AddDropShadow method.</P>
                <P>
                    <span class=language>[C#]</span><br>
                    <pre><code class="language-csharp">void AddDropShadow(Doc doc, int id, double gaussianBlurRadius, double shadowHorizontalShift, double shadowVerticalShift, XColor shadowColor) {
&nbsp;&nbsp;string rect = doc.Rect.String;
&nbsp;&nbsp;string transform = doc.Transform.String;
&nbsp;&nbsp;string color = doc.Color.String;
&nbsp;&nbsp;double dpiX = doc.Rendering.DotsPerInchX;
&nbsp;&nbsp;double dpiY = doc.Rendering.DotsPerInchY;
&nbsp;&nbsp;bool saveAlpha = doc.Rendering.SaveAlpha;
&nbsp;&nbsp;int docLayer = doc.Layer;
&nbsp;&nbsp;try {
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInch = 72;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.SaveAlpha = true;
&nbsp;&nbsp;&nbsp;&nbsp;var layer = doc.ObjectSoup[id] as Layer;
&nbsp;&nbsp;&nbsp;&nbsp;var page = doc.ObjectSoup[doc.Page] as Page;
&nbsp;&nbsp;&nbsp;&nbsp;var bm = page.GetBitmap(new Layer[] { layer });
&nbsp;&nbsp;&nbsp;&nbsp;// expand image if blur may move content off edges
&nbsp;&nbsp;&nbsp;&nbsp;int border = 0;
&nbsp;&nbsp;&nbsp;&nbsp;if (gaussianBlurRadius &gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// we extend our border out two standard deviations
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border = (int)Math.Round(Math.Abs(gaussianBlurRadius)) * 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int borders = border * 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var larger = new Bitmap(bm.Width + borders, bm.Height + borders, bm.PixelFormat);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;larger.SetResolution(bm.HorizontalResolution, bm.VerticalResolution);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using (var graphics = Graphics.FromImage(larger)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graphics.DrawImage(bm, new Point(border, border));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bm != null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bm.Dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bm = larger;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;doc.Transform.Reset();
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.String = layer.Rect.String;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.Inset(-border, -border);
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.Move(shadowHorizontalShift, shadowVerticalShift);
&nbsp;&nbsp;&nbsp;&nbsp;doc.Layer = docLayer + 1;
&nbsp;&nbsp;&nbsp;&nbsp;int pid = doc.AddImageBitmap(bm, true);
&nbsp;&nbsp;&nbsp;&nbsp;bm.Dispose();
&nbsp;&nbsp;&nbsp;&nbsp;// Here we set the base image to be one pixel of an appropriate color.
&nbsp;&nbsp;&nbsp;&nbsp;// This is what will determine the shadow color.
&nbsp;&nbsp;&nbsp;&nbsp;var img = doc.ObjectSoup[pid] as ImageLayer;
&nbsp;&nbsp;&nbsp;&nbsp;var pm = img.PixMap;
&nbsp;&nbsp;&nbsp;&nbsp;pm.ClearData(); // this will remove any compression settings
&nbsp;&nbsp;&nbsp;&nbsp;pm.SetData(new byte[] { (byte)shadowColor.Red, (byte)shadowColor.Green, (byte)shadowColor.Blue });
&nbsp;&nbsp;&nbsp;&nbsp;pm.Width = 1;
&nbsp;&nbsp;&nbsp;&nbsp;pm.Height = 1;
&nbsp;&nbsp;&nbsp;&nbsp;// The alpha channel is held as a separate soft mask and this is what will
&nbsp;&nbsp;&nbsp;&nbsp;// determine the shape of the shadow. If required we blur it to give it
&nbsp;&nbsp;&nbsp;&nbsp;// soft edges.
&nbsp;&nbsp;&nbsp;&nbsp;var alpha = pm.SMask;
&nbsp;&nbsp;&nbsp;&nbsp;if (gaussianBlurRadius &gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;using (EffectOperation effect = new EffectOperation("Gaussian Blur")) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters["Radius"].Value = gaussianBlurRadius;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(alpha);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;}
&nbsp;&nbsp;finally {
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.String = rect;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Transform.String = transform;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Color.String = color;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInchX = dpiX;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInchY = dpiY;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.SaveAlpha = saveAlpha;
&nbsp;&nbsp;&nbsp;&nbsp;doc.Layer = docLayer;
&nbsp;&nbsp;}
}
</code></pre><br>
                    <span class=language>[Visual Basic]</span><br>
                    <pre><code class="language-vbnet">Private Sub AddDropShadow(doc As Doc, id As Integer, gaussianBlurRadius As Double, shadowHorizontalShift As Double, shadowVerticalShift As Double, shadowColor As XColor)
&nbsp;&nbsp;Dim rect As String = doc.Rect.String
&nbsp;&nbsp;Dim transform As String = doc.Transform.String
&nbsp;&nbsp;Dim color As String = doc.Color.String
&nbsp;&nbsp;Dim dpiX As Double = doc.Rendering.DotsPerInchX
&nbsp;&nbsp;Dim dpiY As Double = doc.Rendering.DotsPerInchY
&nbsp;&nbsp;Dim saveAlpha As Boolean = doc.Rendering.SaveAlpha
&nbsp;&nbsp;Dim docLayer As Integer = doc.Layer
&nbsp;&nbsp;Try
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInch = 72
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.SaveAlpha = True
&nbsp;&nbsp;&nbsp;&nbsp;Dim layer As Layer = TryCast(doc.ObjectSoup(id), Layer)
&nbsp;&nbsp;&nbsp;&nbsp;Dim page As Page = TryCast(doc.ObjectSoup(doc.Page), Page)
&nbsp;&nbsp;&nbsp;&nbsp;Dim bm As Bitmap = page.GetBitmap(New Layer() {layer})
&nbsp;&nbsp;&nbsp;&nbsp;' expand image if blur may move content off edges
&nbsp;&nbsp;&nbsp;&nbsp;Dim border As Integer = 0
&nbsp;&nbsp;&nbsp;&nbsp;If gaussianBlurRadius &gt; 0 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' we extend our border out two standard deviations
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border = DirectCast(Math.Round(Math.Abs(gaussianBlurRadius)), Integer) * 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim borders As Integer = border * 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim larger As New Bitmap(bm.Width + borders, bm.Height + borders, bm.PixelFormat)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;larger.SetResolution(bm.HorizontalResolution, bm.VerticalResolution)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using graphics__1 As Graphics = Graphics.FromImage(larger)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graphics__1.DrawImage(bm, New Point(border, border))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bm = larger
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;doc.Transform.Reset()
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.String = layer.Rect.[String]
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.Inset(-border, -border)
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.Move(shadowHorizontalShift, shadowVerticalShift)
&nbsp;&nbsp;&nbsp;&nbsp;doc.Layer = docLayer + 1
&nbsp;&nbsp;&nbsp;&nbsp;Dim pid As Integer = doc.AddImageBitmap(bm, True)
&nbsp;&nbsp;&nbsp;&nbsp;' Here we set the base image to be one pixel of an appropriate color.
&nbsp;&nbsp;&nbsp;&nbsp;' This is what will determine the shadow color.
&nbsp;&nbsp;&nbsp;&nbsp;Dim img As ImageLayer = TryCast(doc.ObjectSoup(pid), ImageLayer)
&nbsp;&nbsp;&nbsp;&nbsp;Dim pm As PixMap = img.PixMap
&nbsp;&nbsp;&nbsp;&nbsp;pm.ClearData()
&nbsp;&nbsp;&nbsp;&nbsp;' this will remove any compression settings
&nbsp;&nbsp;&nbsp;&nbsp;pm.SetData(New Byte() {DirectCast(shadowColor.Red, Byte), DirectCast(shadowColor.Green, Byte), DirectCast(shadowColor.Blue, Byte)})
&nbsp;&nbsp;&nbsp;&nbsp;pm.Width = 1
&nbsp;&nbsp;&nbsp;&nbsp;pm.Height = 1
&nbsp;&nbsp;&nbsp;&nbsp;' The alpha channel is held as a separate soft mask and this is what will
&nbsp;&nbsp;&nbsp;&nbsp;' determine the shape of the shadow. If required we blur it to give it
&nbsp;&nbsp;&nbsp;&nbsp;' soft edges.
&nbsp;&nbsp;&nbsp;&nbsp;Dim alpha As PixMap = pm.SMask
&nbsp;&nbsp;&nbsp;&nbsp;If gaussianBlurRadius &gt; 0 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Using effect As New EffectOperation("Gaussian Blur")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Parameters("Radius").Value = gaussianBlurRadius
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;effect.Apply(alpha)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Using
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;Finally
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rect.String = rect
&nbsp;&nbsp;&nbsp;&nbsp;doc.Transform.String = transform
&nbsp;&nbsp;&nbsp;&nbsp;doc.Color.String = color
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInchX = dpiX
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.DotsPerInchY = dpiY
&nbsp;&nbsp;&nbsp;&nbsp;doc.Rendering.SaveAlpha = saveAlpha
&nbsp;&nbsp;&nbsp;&nbsp;doc.Layer = docLayer
&nbsp;&nbsp;End Try
End Sub
</code></pre>
                </P>
                <p>
                    <img src="../../../images/pdf/dropshadows.pdf.png" class="example"><BR>
                    dropshadows.pdf
                </p>
                <P>&nbsp;</P>
            </TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
