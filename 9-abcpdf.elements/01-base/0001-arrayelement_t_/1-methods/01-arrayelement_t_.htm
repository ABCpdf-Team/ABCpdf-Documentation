<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><title>ZZ Elements ArrayElement&lt;T&gt; Constructor Function</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="../../../../mystyles.css">
<link rel="stylesheet" href="../../../../prism.css">
<script src="../../../../prism.js"></script>
<META content="MSHTML 6.00.6000.16809" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=4 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG height=60 src="../../../../images/goo.gif" width=58></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=pageheader>ArrayElement&lt;T&gt; Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD background="../../../../images/steel-line-3.gif" height=11></TD>
          <TD width=60 background="../../../../images/steel-line-3.gif" 
          height=11></TD>
          <TD height=11><IMG height=11 src="../../../../images/steel-blob-11.gif" 
            width=11></TD></TR>
        <TR>
          <TD>
            <P>Create a new <a href="../default.htm">ArrayElement</a>.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR>
            <CODE> <a href="../default.htm">ArrayElement</a>&lt;T&gt;()<br> <a href="../default.htm">ArrayElement</a>&lt;T&gt;(Atom atom, IndirectObject host)<br> <a href="../default.htm">ArrayElement</a>&lt;T&gt;(IndirectObject obj)<br> <a href="../default.htm">ArrayElement</a>&lt;T&gt;(<a href="../../1086-element/default.htm">Element</a> relation, CreationOptions options)<BR>
            </CODE><BR><SPAN class=language>[Visual Basic]</SPAN><BR>
            <CODE><a href="../default.htm">ArrayElement</a>&lt;T&gt;()<br><a href="../default.htm">ArrayElement</a>&lt;T&gt;(atom As Atom, host As IndirectObject)<br><a href="../default.htm">ArrayElement</a>&lt;T&gt;(obj As IndirectObject)<br><a href="../default.htm">ArrayElement</a>&lt;T&gt;(relation As <a href="../../1086-element/default.htm">Element</a>, options As CreationOptions)<BR>
            </CODE>
			</P>
			
			
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable borderColor=#ffffff cellSpacing=0 
            cellPadding=3 border=5>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>atom</TD>
                <TD>The Atom to be assigned to this <a href="../../1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>host</TD>
                <TD>An IndirectObject. This can be any IndirectObject from the Soup but ideally should be one closely associated with the Atom.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>obj</TD>
                <TD>The IndirectObject to be assigned to this <a href="../../1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>relation</TD>
                <TD>An <a href="../../1086-element/default.htm">Element</a>. This can be any <a href="../../1086-element/default.htm">Element</a> in the Soup but ideally should be one closely associated with this <a href="../../1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>options</TD>
                <TD>Options related to creation. For example this allows you to determine whether the <a href="../../1086-element/default.htm">Element</a> should be created using an IndirectObject rather than just an Atom. If not provided a default set of options is used.</TD>
              </TR>
</TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            
<p>Create a new <a href="../default.htm">ArrayElement</a><T>.</p>
<p>The different constructors allow different ways of creating an <a href="../../1086-element/default.htm">Element</a>. Some are used for wrapping existing Atoms or IndirectObjects and others are for creating new ones.</p>
<p>The constructor taking a relation <a href="../../1086-element/default.htm">Element</a> creates a new object in the document - it is typically the constructor you will want to use. Do not specify creation options unless you have very specific needs.</p>
<p>However for your first <a href="../../1086-element/default.htm">Element</a> - one you can use as a relation for the others - you will need to wrap an existing IndirectObject inside an <a href="../../1086-element/default.htm">Element</a>. For this you might use code of the following form "<a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a> root =  new <a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a>(doc.ObjectSoup.Catalog)".</p>
<p>The parameterless constructor allows you to create an empty <a href="../../1086-element/default.htm">Element</a>. By empty we mean it has no contents - no Atom within it. So before use an Atom must be Assigned or Created. In practice it is easiest to do this using one of the other constructors.</p>
<p>The atom and host constructor is used to wrap an existing Atom. It creates an <a href="../../1086-element/default.htm">Element</a> and then Assigns the Atom to it. The result is a specialized <a href="../../1086-element/default.htm">Element</a> which can be used to examine or modify the contents of the Atom.</p>


<p>The CreationOptions enumeration may take the following values:</p>
<ul>
<li>Default - Default creation options for this particular type of <a href="../../1086-element/default.htm">Element</a>.</li>
<li>Indirect - Create <a href="../../1086-element/default.htm">Element</a> containing an IndirectObject.</li>
<li>Direct - Create <a href="../../1086-element/default.htm">Element</a> containing an Atom.</li>
</ul>


            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>This code snippet is taken from TaggedPDF.cs line 630 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">if (parent.EntryK == null)
&nbsp;&nbsp;parent.EntryK = new <a href="../default.htm">ArrayElement</a>&lt;<a href="../../1086-element/default.htm">Element</a>&gt;(parent);
if (index &gt; parent.EntryK.Count)
&nbsp;&nbsp;index = parent.EntryK.Count;
parent.EntryK.Insert(index, element);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">If parent.EntryK Is Nothing Then
&nbsp;&nbsp;parent.EntryK = New <a href="../default.htm">ArrayElement</a>(Of <a href="../../1086-element/default.htm">Element</a>)(parent)
End If
If index &gt; parent.EntryK.Count Then
&nbsp;&nbsp;index = parent.EntryK.Count
End If
parent.EntryK.Insert(index, element)
</code></pre></P>
<P>This code snippet is taken from Annotations.cs line 81 in the Annotations example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp"><a href="../../../12-interactive/1394-borderstyleelement/2-properties/04-entryd.htm">BorderStyleElement.EntryD</a> = new <a href="../default.htm">ArrayElement</a>&lt;<a href="../../1086-element/default.htm">Element</a>&gt;(Atom.FromString(value), AnnotationElement.Host);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet"><a href="../../../12-interactive/1394-borderstyleelement/2-properties/04-entryd.htm">BorderStyleElement.EntryD</a> = New <a href="../default.htm">ArrayElement</a>(Of <a href="../../1086-element/default.htm">Element</a>)(Atom.FromString(value), AnnotationElement.Host)
</code></pre></P>
<P>This code snippet is taken from Annotations.cs line 310 in the Annotations example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">string partialName, parentName;
List&lt;string&gt; parts = new List&lt;string&gt;(fieldName.Split(new char[] { &#39;.&#39; }));
partialName = parts[parts.Count - 1];
if (string.IsNullOrEmpty(parts[parts.Count - 1]))
&nbsp;&nbsp;parts.RemoveAt(parts.Count - 1);
parentName = string.Join(&quot;.&quot;, parts);
<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a> parent = new <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>(Form.Doc.Form[parentName]);
if (parent.EntryKids == null)
&nbsp;&nbsp;parent.EntryKids = new <a href="../default.htm">ArrayElement</a>&lt;<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>&gt;();
parent.EntryKids.Add(<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>);
<a href="../../../12-interactive/1440-fieldelement/2-properties/03-entryparent.htm">FieldElement.EntryParent</a> = parent;
if (!string.IsNullOrEmpty(partialName))
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/05-entryt.htm">FieldElement.EntryT</a> = fieldName;
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">Dim partialName, parentName As String
Dim parts As New List(Of String)(fieldName.Split(New Char() { &quot;.&quot;c }))
partialName = parts(parts.Count - 1)
If String.IsNullOrEmpty(parts(parts.Count - 1)) Then
&nbsp;&nbsp;parts.RemoveAt(parts.Count - 1)
End If
parentName = String.Join(&quot;.&quot;, parts)
Dim parent As New <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>(Form.Doc.Form(parentName))
If parent.EntryKids Is Nothing Then
&nbsp;&nbsp;parent.EntryKids = New <a href="../default.htm">ArrayElement</a>(Of <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>)()
End If
parent.EntryKids.Add(<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>)
<a href="../../../12-interactive/1440-fieldelement/2-properties/03-entryparent.htm">FieldElement.EntryParent</a> = parent
If Not String.IsNullOrEmpty(partialName) Then
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/05-entryt.htm">FieldElement.EntryT</a> = fieldName
End If
</code></pre></P>
<P>This code snippet is taken from Annotations.cs line 333 in the Annotations example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">int fieldID = FieldElement.Object.ID;
if ((Widgets.Count == 0) || ((Widgets.Count == 1) &amp;&amp; (Widgets[0].AnnotationElement.Object.ID == fieldID))) {
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/04-entrykids.htm">FieldElement.EntryKids</a> = null;
&nbsp;&nbsp;return;
}
<a href="../../../12-interactive/1440-fieldelement/2-properties/04-entrykids.htm">FieldElement.EntryKids</a> = new <a href="../default.htm">ArrayElement</a>&lt;<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>&gt;(<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>);
string ft = null;
<a href="../../1086-element/default.htm">Element</a> dv = null;
foreach (WidgetAnnotation widget in Widgets) {
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a> kid = new <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>(widget.WidgetElement.Object);
&nbsp;&nbsp;if (kid.Object.ID != fieldID) { // not the same object
&nbsp;&nbsp;&nbsp;&nbsp;kid.EntryParent = <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>;
&nbsp;&nbsp;&nbsp;&nbsp;FieldElement.EntryKids.Add(kid);
&nbsp;&nbsp;}
&nbsp;&nbsp;if (ft == null)
&nbsp;&nbsp;&nbsp;&nbsp;ft = kid.EntryFT;
&nbsp;&nbsp;if (dv == null)
&nbsp;&nbsp;&nbsp;&nbsp;dv = kid.EntryDV;
&nbsp;&nbsp;kid.EntryFT = null;
&nbsp;&nbsp;kid.EntryV = null;
&nbsp;&nbsp;kid.EntryDV = null;
}
if (ft != null)
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/02-entryft.htm">FieldElement.EntryFT</a> = ft;
if (dv != null)
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/10-entrydv.htm">FieldElement.EntryDV</a> = dv;
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">Dim fieldID As Integer = FieldElement.Object.ID
If (Widgets.Count = 0) OrElse ((Widgets.Count = 1) AndAlso (Widgets(0).AnnotationElement.Object.ID = fieldID)) Then
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/04-entrykids.htm">FieldElement.EntryKids</a> = Nothing
&nbsp;&nbsp;Return
End If
<a href="../../../12-interactive/1440-fieldelement/2-properties/04-entrykids.htm">FieldElement.EntryKids</a> = New <a href="../default.htm">ArrayElement</a>(Of <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>)(<a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>)
Dim ft As String = Nothing
Dim dv As <a href="../../1086-element/default.htm">Element</a> = Nothing
For Each widget As WidgetAnnotation In Widgets
&nbsp;&nbsp;Dim kid As New <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>(widget.WidgetElement.Object)
&nbsp;&nbsp;If kid.Object.ID &lt;&gt; fieldID Then &#39; not the same object
&nbsp;&nbsp;&nbsp;&nbsp;kid.EntryParent = <a href="../../../12-interactive/1440-fieldelement/default.htm">FieldElement</a>
&nbsp;&nbsp;&nbsp;&nbsp;FieldElement.EntryKids.Add(kid)
&nbsp;&nbsp;End If
&nbsp;&nbsp;If ft Is Nothing Then
&nbsp;&nbsp;&nbsp;&nbsp;ft = kid.EntryFT
&nbsp;&nbsp;End If
&nbsp;&nbsp;If dv Is Nothing Then
&nbsp;&nbsp;&nbsp;&nbsp;dv = kid.EntryDV
&nbsp;&nbsp;End If
&nbsp;&nbsp;kid.EntryFT = Nothing
&nbsp;&nbsp;kid.EntryV = Nothing
&nbsp;&nbsp;kid.EntryDV = Nothing
Next widget
If ft IsNot Nothing Then
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/02-entryft.htm">FieldElement.EntryFT</a> = ft
End If
If dv IsNot Nothing Then
&nbsp;&nbsp;<a href="../../../12-interactive/1440-fieldelement/2-properties/10-entrydv.htm">FieldElement.EntryDV</a> = dv
End If
</code></pre></P>

            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
