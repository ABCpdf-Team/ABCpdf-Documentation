<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><title>ZZ Elements StructureElementElement Constructor Function</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="../../../../mystyles.css">
<link rel="stylesheet" href="../../../../prism.css">
<script src="../../../../prism.js"></script>
<META content="MSHTML 6.00.6000.16809" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=4 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG height=60 src="../../../../images/goo.gif" width=58></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=pageheader>StructureElementElement Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD background="../../../../images/steel-line-3.gif" height=11></TD>
          <TD width=60 background="../../../../images/steel-line-3.gif" 
          height=11></TD>
          <TD height=11><IMG height=11 src="../../../../images/steel-blob-11.gif" 
            width=11></TD></TR>
        <TR>
          <TD>
            <P>Create a new <a href="../default.htm">StructureElementElement</a>.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR>
            <CODE> <a href="../default.htm">StructureElementElement</a>()<br> <a href="../default.htm">StructureElementElement</a>(Atom atom, IndirectObject host)<br> <a href="../default.htm">StructureElementElement</a>(IndirectObject obj)<br> <a href="../default.htm">StructureElementElement</a>(<a href="../../../01-base/1086-element/default.htm">Element</a> relation, CreationOptions options)<BR>
            </CODE><BR><SPAN class=language>[Visual Basic]</SPAN><BR>
            <CODE><a href="../default.htm">StructureElementElement</a>()<br><a href="../default.htm">StructureElementElement</a>(atom As Atom, host As IndirectObject)<br><a href="../default.htm">StructureElementElement</a>(obj As IndirectObject)<br><a href="../default.htm">StructureElementElement</a>(relation As <a href="../../../01-base/1086-element/default.htm">Element</a>, options As CreationOptions)<BR>
            </CODE>
			</P>
			
			
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable borderColor=#ffffff cellSpacing=0 
            cellPadding=3 border=5>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>atom</TD>
                <TD>The Atom to be assigned to this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>host</TD>
                <TD>An IndirectObject. This can be any IndirectObject from the Soup but ideally should be one closely associated with the Atom.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>obj</TD>
                <TD>The IndirectObject to be assigned to this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>relation</TD>
                <TD>An <a href="../../../01-base/1086-element/default.htm">Element</a>. This can be any <a href="../../../01-base/1086-element/default.htm">Element</a> in the Soup but ideally should be one closely associated with this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>options</TD>
                <TD>Options related to creation. For example this allows you to determine whether the <a href="../../../01-base/1086-element/default.htm">Element</a> should be created using an IndirectObject rather than just an Atom. If not provided a default set of options is used.</TD>
              </TR>
</TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            
<p>Create a new <a href="../default.htm">StructureElementElement</a>.</p>
<p>The different constructors allow different ways of creating an <a href="../../../01-base/1086-element/default.htm">Element</a>. Some are used for wrapping existing Atoms or IndirectObjects and others are for creating new ones.</p>
<p>The constructor taking a relation <a href="../../../01-base/1086-element/default.htm">Element</a> creates a new object in the document - it is typically the constructor you will want to use. Do not specify creation options unless you have very specific needs.</p>
<p>However for your first <a href="../../../01-base/1086-element/default.htm">Element</a> - one you can use as a relation for the others - you will need to wrap an existing IndirectObject inside an <a href="../../../01-base/1086-element/default.htm">Element</a>. For this you might use code of the following form "<a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a> root =  new <a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a>(doc.ObjectSoup.Catalog)".</p>
<p>The parameterless constructor allows you to create an empty <a href="../../../01-base/1086-element/default.htm">Element</a>. By empty we mean it has no contents - no Atom within it. So before use an Atom must be Assigned or Created. In practice it is easiest to do this using one of the other constructors.</p>
<p>The atom and host constructor is used to wrap an existing Atom. It creates an <a href="../../../01-base/1086-element/default.htm">Element</a> and then Assigns the Atom to it. The result is a specialized <a href="../../../01-base/1086-element/default.htm">Element</a> which can be used to examine or modify the contents of the Atom.</p>


<p>The CreationOptions enumeration may take the following values:</p>
<ul>
<li>Default - Default creation options for this particular type of <a href="../../../01-base/1086-element/default.htm">Element</a>.</li>
<li>Indirect - Create <a href="../../../01-base/1086-element/default.htm">Element</a> containing an IndirectObject.</li>
<li>Direct - Create <a href="../../../01-base/1086-element/default.htm">Element</a> containing an Atom.</li>
</ul>


            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>This code snippet is taken from Form1.cs line 294 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">if (table.Items.Count &lt;= 1)
&nbsp;&nbsp;continue; // too small
int index = 0;
<a href="../default.htm">StructureElementElement</a> parent = null;
<a href="../default.htm">StructureElementElement</a> tb = new <a href="../default.htm">StructureElementElement</a>(document);
tb.EntryType = &quot;StructElem&quot;;
tb.EntryS = &quot;Table&quot;;
foreach (Row row in table.Items) {
&nbsp;&nbsp;<a href="../default.htm">StructureElementElement</a> tr = new <a href="../default.htm">StructureElementElement</a>(document);
&nbsp;&nbsp;tr.EntryType = &quot;StructElem&quot;;
&nbsp;&nbsp;tr.EntryS = &quot;TR&quot;;
&nbsp;&nbsp;tr.SetParent(tb);
&nbsp;&nbsp;foreach (<a href="../default.htm">StructureElementElement</a> item in row.Items) {
&nbsp;&nbsp;&nbsp;&nbsp;if ((parent == null) &amp;&amp; (item != null)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debug.Assert(item.EntryP is <a href="../../1565-structuretreerootelement/default.htm">StructureTreeRootElement</a> == false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent = item.EntryP as <a href="../default.htm">StructureElementElement</a>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index = parent.EntryK.IndexOf(item);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;<a href="../default.htm">StructureElementElement</a> td = new <a href="../default.htm">StructureElementElement</a>(document);
&nbsp;&nbsp;&nbsp;&nbsp;td.EntryType = &quot;StructElem&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;td.EntryS = &quot;TD&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;td.SetParent(tr);
&nbsp;&nbsp;&nbsp;&nbsp;if (item != null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.SetParent(td);
&nbsp;&nbsp;}
}
tb.SetParent(parent, index);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">If table.Items.Count &lt;= 1 Then
&nbsp;&nbsp;continue &#39; too small
End If
Dim index As Integer = 0
Dim parent As <a href="../default.htm">StructureElementElement</a> = Nothing
Dim tb As New <a href="../default.htm">StructureElementElement</a>(document)
tb.EntryType = &quot;StructElem&quot;
tb.EntryS = &quot;Table&quot;
For Each row As Row In table.Items
&nbsp;&nbsp;Dim tr As New <a href="../default.htm">StructureElementElement</a>(document)
&nbsp;&nbsp;tr.EntryType = &quot;StructElem&quot;
&nbsp;&nbsp;tr.EntryS = &quot;TR&quot;
&nbsp;&nbsp;tr.SetParent(tb)
&nbsp;&nbsp;For Each item As <a href="../default.htm">StructureElementElement</a> In row.Items
&nbsp;&nbsp;&nbsp;&nbsp;If (parent Is Nothing) AndAlso (item IsNot Nothing) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Debug.Assert(TypeOf item.EntryP Is <a href="../../1565-structuretreerootelement/default.htm">StructureTreeRootElement</a> = False)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent = TryCast(item.EntryP, <a href="../default.htm">StructureElementElement</a>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index = parent.EntryK.IndexOf(item)
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;Dim td As New <a href="../default.htm">StructureElementElement</a>(document)
&nbsp;&nbsp;&nbsp;&nbsp;td.EntryType = &quot;StructElem&quot;
&nbsp;&nbsp;&nbsp;&nbsp;td.EntryS = &quot;TD&quot;
&nbsp;&nbsp;&nbsp;&nbsp;td.SetParent(tr)
&nbsp;&nbsp;&nbsp;&nbsp;If item IsNot Nothing Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.SetParent(td)
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;Next item
Next row
tb.SetParent(parent, index)
</code></pre></P>
<P>This code snippet is taken from Form1.cs line 335 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">theDoc.Read(src);
AccessibilityOperation op = new AccessibilityOperation(theDoc);
op.PageContents.AddPages();
op.MakeAccessible();
theDoc.Save(dst);
Structure tags = new Structure();
tags.Load(theDoc);
// reorder elements so that they go from top to bottom
<a href="../default.htm">StructureElementElement</a> document = (<a href="../default.htm">StructureElementElement</a>)tags.Root.EntryK[0];
KidArranger.SortTopToBottom(tags, document);
// determine what styles are used for headers and change tag type appropriately
List&lt;<a href="../default.htm">StructureElementElement</a>&gt; elements = tags.FindElementsByType(&quot;P&quot;);
Dictionary&lt;string, List&lt;<a href="../default.htm">StructureElementElement</a>&gt;&gt; styles = new Dictionary&lt;string, List&lt;<a href="../default.htm">StructureElementElement</a>&gt;&gt;();
foreach (<a href="../default.htm">StructureElementElement</a> element in elements) {
&nbsp;&nbsp;string weight = null;
&nbsp;&nbsp;if (!element.GetStyle().TryGetValue(&quot;font-weight&quot;, out weight))
&nbsp;&nbsp;&nbsp;&nbsp;continue; // we are only interested in bold fonts
&nbsp;&nbsp;int value = 0;
&nbsp;&nbsp;if ((!int.TryParse(weight, out value)) || (value &lt; 700))
&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;string size = null;
&nbsp;&nbsp;if (!element.GetStyle().TryGetValue(&quot;font-size&quot;, out size))
&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;List&lt;<a href="../default.htm">StructureElementElement</a>&gt; matches = null;
&nbsp;&nbsp;if (!styles.TryGetValue(size, out matches)) {
&nbsp;&nbsp;&nbsp;&nbsp;matches = new List&lt;<a href="../default.htm">StructureElementElement</a>&gt;();
&nbsp;&nbsp;&nbsp;&nbsp;styles[size] = matches;
&nbsp;&nbsp;}
&nbsp;&nbsp;matches.Add(element);
}
List&lt;Style&gt; headers = new List&lt;Style&gt;();
foreach (KeyValuePair&lt;string, List&lt;<a href="../default.htm">StructureElementElement</a>&gt;&gt; pair in styles)
&nbsp;&nbsp;headers.Add(new Style(pair.Key, pair.Value));
headers.Sort((i1, i2) =&gt; i1.Elements.Count.CompareTo(i2.Elements.Count));
for (int i = 0; i &lt; headers.Count; i++) {
&nbsp;&nbsp;if (i &gt; 4)
&nbsp;&nbsp;&nbsp;&nbsp;break; // limit the number of header levels
&nbsp;&nbsp;string tag = &quot;H&quot; + (i + 1).ToString();
&nbsp;&nbsp;foreach (<a href="../default.htm">StructureElementElement</a> element in headers[i].Elements) {
&nbsp;&nbsp;&nbsp;&nbsp;element.EntryS = tag;
&nbsp;&nbsp;}
}
theDoc.Save(dst);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">theDoc.Read(src)
Dim op As New AccessibilityOperation(theDoc)
op.PageContents.AddPages()
op.MakeAccessible()
theDoc.Save(dst)
Dim tags As [Structure] = New [Structure]()
tags.Load(theDoc)
&#39; reorder elements so that they go from top to bottom
Dim document As <a href="../default.htm">StructureElementElement</a> = CType(tags.Root.EntryK(0), <a href="../default.htm">StructureElementElement</a>)
KidArranger.SortTopToBottom(tags, document)
&#39; determine what styles are used for headers and change tag type appropriately
Dim elements As List(Of <a href="../default.htm">StructureElementElement</a>) = tags.FindElementsByType(&quot;P&quot;)
Dim styles As New Dictionary(Of String, List(Of <a href="../default.htm">StructureElementElement</a>))()
For Each element As <a href="../default.htm">StructureElementElement</a> In elements
&nbsp;&nbsp;Dim weight As String = Nothing
&nbsp;&nbsp;If Not element.GetStyle().TryGetValue(&quot;font-weight&quot;, weight) Then
&nbsp;&nbsp;&nbsp;&nbsp;Continue For &#39; we are only interested in bold fonts
&nbsp;&nbsp;End If
&nbsp;&nbsp;Dim value As Integer = 0
&nbsp;&nbsp;If (Not Integer.TryParse(weight, value)) OrElse (value &lt; 700) Then
&nbsp;&nbsp;&nbsp;&nbsp;Continue For
&nbsp;&nbsp;End If
&nbsp;&nbsp;Dim size As String = Nothing
&nbsp;&nbsp;If Not element.GetStyle().TryGetValue(&quot;font-size&quot;, size) Then
&nbsp;&nbsp;&nbsp;&nbsp;Continue For
&nbsp;&nbsp;End If
&nbsp;&nbsp;Dim matches As List(Of <a href="../default.htm">StructureElementElement</a>) = Nothing
&nbsp;&nbsp;If Not styles.TryGetValue(size, matches) Then
&nbsp;&nbsp;&nbsp;&nbsp;matches = New List(Of <a href="../default.htm">StructureElementElement</a>)()
&nbsp;&nbsp;&nbsp;&nbsp;styles(size) = matches
&nbsp;&nbsp;End If
&nbsp;&nbsp;matches.Add(element)
Next element
Dim headers As New List(Of Style)()
For Each pair As KeyValuePair(Of String, List(Of <a href="../default.htm">StructureElementElement</a>)) In styles
&nbsp;&nbsp;headers.Add(New Style(pair.Key, pair.Value))
Next pair
headers.Sort(Function(i1, i2) i1.Elements.Count.CompareTo(i2.Elements.Count))
For i As Integer = 0 To headers.Count - 1
&nbsp;&nbsp;If i &gt; 4 Then
&nbsp;&nbsp;&nbsp;&nbsp;Exit For &#39; limit the number of header levels
&nbsp;&nbsp;End If
&nbsp;&nbsp;Dim tag As String = &quot;H&quot; &amp; (i + 1).ToString()
&nbsp;&nbsp;For Each element As <a href="../default.htm">StructureElementElement</a> In headers(i).Elements
&nbsp;&nbsp;&nbsp;&nbsp;element.EntryS = tag
&nbsp;&nbsp;Next element
Next i
theDoc.Save(dst)
</code></pre></P>
<P>This code snippet is taken from Form1.cs line 406 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">list = new <a href="../default.htm">StructureElementElement</a>(document);
list.EntryType = &quot;StructElem&quot;;
list.EntryS = &quot;L&quot;;
Debug.Assert(element.EntryP is <a href="../../1565-structuretreerootelement/default.htm">StructureTreeRootElement</a> == false);
<a href="../default.htm">StructureElementElement</a> parent = element.EntryP as <a href="../default.htm">StructureElementElement</a>;
Debug.Assert(parent != null);
int index = parent.EntryK.IndexOf(element);
list.SetParent(parent, index);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">list = New <a href="../default.htm">StructureElementElement</a>(document)
list.EntryType = &quot;StructElem&quot;
list.EntryS = &quot;L&quot;
Debug.Assert(TypeOf element.EntryP Is <a href="../../1565-structuretreerootelement/default.htm">StructureTreeRootElement</a> = False)
Dim parent As <a href="../default.htm">StructureElementElement</a> = TryCast(element.EntryP, <a href="../default.htm">StructureElementElement</a>)
Debug.Assert(parent IsNot Nothing)
Dim index As Integer = parent.EntryK.IndexOf(element)
list.SetParent(parent, index)
</code></pre></P>
<P>This code snippet is taken from Form1.cs line 435 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">theDoc.Read(src);
AccessibilityOperation op = new AccessibilityOperation(theDoc);
op.PageContents.AddPages();
op.MakeAccessible();
theDoc.Save(dst);
Structure tags = new Structure();
tags.Load(theDoc);
// reorder elements so that they go from top to bottom
<a href="../default.htm">StructureElementElement</a> document = (<a href="../default.htm">StructureElementElement</a>)tags.Root.EntryK[0];
KidArranger.SortTopToBottom(tags, document);
// define structure hierarchy template
List&lt;Heading&gt; template = new List&lt;Heading&gt;();
template.Add(new Heading(&quot;Title &quot;, &quot;Part&quot;, 1));
template.Add(new Heading(&quot;Subheader &quot;, &quot;Sect&quot;, 2));
// detect and insert section item structure
List&lt;<a href="../default.htm">StructureElementElement</a>&gt; elements = tags.FindElementsByType(&quot;P&quot;);
Stack&lt;<a href="../default.htm">StructureElementElement</a>&gt; hierarchy = new Stack&lt;<a href="../default.htm">StructureElementElement</a>&gt;();
foreach (<a href="../default.htm">StructureElementElement</a> element in elements) {
&nbsp;&nbsp;string text = element.EntryActualText.TrimStart();
&nbsp;&nbsp;foreach (Heading item in template) {
&nbsp;&nbsp;&nbsp;&nbsp;if (text.StartsWith(item.Match)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (hierarchy.Count &gt;= item.Level)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hierarchy.Pop();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hierarchy.Count == item.Level - 1) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="../default.htm">StructureElementElement</a> heading = new <a href="../default.htm">StructureElementElement</a>(document);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.EntryType = &quot;StructElem&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.EntryS = item.Type;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="../default.htm">StructureElementElement</a> parent = (<a href="../default.htm">StructureElementElement</a>)element.EntryP;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int index = parent.EntryK.IndexOf(element);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.SetParent(hierarchy.Count &gt; 0 ? hierarchy.Peek() : parent, index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hierarchy.Push(heading);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;}
&nbsp;&nbsp;if (hierarchy.Count &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;element.SetParent(hierarchy.Peek(), Int32.MaxValue);
}
theDoc.Save(dst);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">theDoc.Read(src)
Dim op As New AccessibilityOperation(theDoc)
op.PageContents.AddPages()
op.MakeAccessible()
theDoc.Save(dst)
Dim tags As [Structure] = New [Structure]()
tags.Load(theDoc)
&#39; reorder elements so that they go from top to bottom
Dim document As <a href="../default.htm">StructureElementElement</a> = CType(tags.Root.EntryK(0), <a href="../default.htm">StructureElementElement</a>)
KidArranger.SortTopToBottom(tags, document)
&#39; define structure hierarchy template
Dim template As New List(Of Heading)()
template.Add(New Heading(&quot;Title &quot;, &quot;Part&quot;, 1))
template.Add(New Heading(&quot;Subheader &quot;, &quot;Sect&quot;, 2))
&#39; detect and insert section item structure
Dim elements As List(Of <a href="../default.htm">StructureElementElement</a>) = tags.FindElementsByType(&quot;P&quot;)
Dim hierarchy As New Stack(Of <a href="../default.htm">StructureElementElement</a>)()
For Each element As <a href="../default.htm">StructureElementElement</a> In elements
&nbsp;&nbsp;Dim text As String = element.EntryActualText.TrimStart()
&nbsp;&nbsp;For Each item As Heading In template
&nbsp;&nbsp;&nbsp;&nbsp;If text.StartsWith(item.Match) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Do While hierarchy.Count &gt;= item.Level
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hierarchy.Pop()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Loop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If hierarchy.Count = item.Level - 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim heading As New <a href="../default.htm">StructureElementElement</a>(document)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.EntryType = &quot;StructElem&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.EntryS = item.Type
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim parent As <a href="../default.htm">StructureElementElement</a> = CType(element.EntryP, <a href="../default.htm">StructureElementElement</a>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim index As Integer = parent.EntryK.IndexOf(element)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heading.SetParent(If(hierarchy.Count &gt; 0, hierarchy.Peek(), parent), index)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hierarchy.Push(heading)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit For
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;Next item
&nbsp;&nbsp;If hierarchy.Count &gt; 0 Then
&nbsp;&nbsp;&nbsp;&nbsp;element.SetParent(hierarchy.Peek(), Int32.MaxValue)
&nbsp;&nbsp;End If
Next element
theDoc.Save(dst)
</code></pre></P>
<P>This code snippet is taken from TableDetection.cs line 171 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">_tags = tags;
_items = new List&lt;<a href="../default.htm">StructureElementElement</a>&gt;();
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">_tags = tags
_items = New List(Of <a href="../default.htm">StructureElementElement</a>)()
</code></pre></P>
<P>This code snippet is taken from TaggedPDF.cs line 61 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">_root = new <a href="../default.htm">StructureElementElement</a>(root, _catalog);
DictAtom tree = _catalog.Resolve(Atom.GetItem(_root.Atom, &quot;ParentTree&quot;)) as DictAtom;
_parentTree = new ParentTree(this, tree);
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">_root = New <a href="../default.htm">StructureElementElement</a>(root, _catalog)
Dim tree As DictAtom = TryCast(_catalog.Resolve(Atom.GetItem(_root.Atom, &quot;ParentTree&quot;)), DictAtom)
_parentTree = New ParentTree(Me, tree)
</code></pre></P>
<P>This code snippet is taken from TaggedPDF.cs line 69 in the AccessiblePDF example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp">List&lt;<a href="../default.htm">StructureElementElement</a>&gt; items = new List&lt;<a href="../default.htm">StructureElementElement</a>&gt;();
FindElementsByType(_root, items, type);
return items;
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">Dim items As New List(Of <a href="../default.htm">StructureElementElement</a>)()
FindElementsByType(_root, items, type)
Return items
</code></pre></P>

            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
