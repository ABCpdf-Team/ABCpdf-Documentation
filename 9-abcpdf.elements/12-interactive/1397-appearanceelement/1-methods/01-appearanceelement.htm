<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><title>ZZ Elements AppearanceElement Constructor Function</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="../../../../mystyles.css">
<link rel="stylesheet" href="../../../../prism.css">
<script src="../../../../prism.js"></script>
<META content="MSHTML 6.00.6000.16809" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=4 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG height=60 src="../../../../images/goo.gif" width=58></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=pageheader>AppearanceElement Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD background="../../../../images/steel-line-3.gif" height=11></TD>
          <TD width=60 background="../../../../images/steel-line-3.gif" 
          height=11></TD>
          <TD height=11><IMG height=11 src="../../../../images/steel-blob-11.gif" 
            width=11></TD></TR>
        <TR>
          <TD>
            <P>Create a new <a href="../default.htm">AppearanceElement</a>.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR>
            <CODE> <a href="../default.htm">AppearanceElement</a>()<br> <a href="../default.htm">AppearanceElement</a>(Atom atom, IndirectObject host)<br> <a href="../default.htm">AppearanceElement</a>(IndirectObject obj)<br> <a href="../default.htm">AppearanceElement</a>(<a href="../../../01-base/1086-element/default.htm">Element</a> relation, CreationOptions options)<BR>
            </CODE><BR><SPAN class=language>[Visual Basic]</SPAN><BR>
            <CODE><a href="../default.htm">AppearanceElement</a>()<br><a href="../default.htm">AppearanceElement</a>(atom As Atom, host As IndirectObject)<br><a href="../default.htm">AppearanceElement</a>(obj As IndirectObject)<br><a href="../default.htm">AppearanceElement</a>(relation As <a href="../../../01-base/1086-element/default.htm">Element</a>, options As CreationOptions)<BR>
            </CODE>
			</P>
			
			
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable borderColor=#ffffff cellSpacing=0 
            cellPadding=3 border=5>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>atom</TD>
                <TD>The Atom to be assigned to this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>host</TD>
                <TD>An IndirectObject. This can be any IndirectObject from the Soup but ideally should be one closely associated with the Atom.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>obj</TD>
                <TD>The IndirectObject to be assigned to this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>relation</TD>
                <TD>An <a href="../../../01-base/1086-element/default.htm">Element</a>. This can be any <a href="../../../01-base/1086-element/default.htm">Element</a> in the Soup but ideally should be one closely associated with this <a href="../../../01-base/1086-element/default.htm">Element</a>.</TD>
              </TR>
<TR vAlign=top>
                <TD align=middle>options</TD>
                <TD>Options related to creation. For example this allows you to determine whether the <a href="../../../01-base/1086-element/default.htm">Element</a> should be created using an IndirectObject rather than just an Atom. If not provided a default set of options is used.</TD>
              </TR>
</TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            
<p>Create a new <a href="../default.htm">AppearanceElement</a>.</p>
<p>The different constructors allow different ways of creating an <a href="../../../01-base/1086-element/default.htm">Element</a>. Some are used for wrapping existing Atoms or IndirectObjects and others are for creating new ones.</p>
<p>The constructor taking a relation <a href="../../../01-base/1086-element/default.htm">Element</a> creates a new object in the document - it is typically the constructor you will want to use. Do not specify creation options unless you have very specific needs.</p>
<p>However for your first <a href="../../../01-base/1086-element/default.htm">Element</a> - one you can use as a relation for the others - you will need to wrap an existing IndirectObject inside an <a href="../../../01-base/1086-element/default.htm">Element</a>. For this you might use code of the following form "<a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a> root =  new <a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a>(doc.ObjectSoup.Catalog)".</p>
<p>The parameterless constructor allows you to create an empty <a href="../../../01-base/1086-element/default.htm">Element</a>. By empty we mean it has no contents - no Atom within it. So before use an Atom must be Assigned or Created. In practice it is easiest to do this using one of the other constructors.</p>
<p>The atom and host constructor is used to wrap an existing Atom. It creates an <a href="../../../01-base/1086-element/default.htm">Element</a> and then Assigns the Atom to it. The result is a specialized <a href="../../../01-base/1086-element/default.htm">Element</a> which can be used to examine or modify the contents of the Atom.</p>


<p>The CreationOptions enumeration may take the following values:</p>
<ul>
<li>Default - Default creation options for this particular type of <a href="../../../01-base/1086-element/default.htm">Element</a>.</li>
<li>Indirect - Create <a href="../../../01-base/1086-element/default.htm">Element</a> containing an IndirectObject.</li>
<li>Direct - Create <a href="../../../01-base/1086-element/default.htm">Element</a> containing an Atom.</li>
</ul>


            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../../images/steel-pin.gif" width=64><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>This code snippet is taken from Annotations.cs line 847 in the Annotations example project.</P>
<P><SPAN class=language>[C#]</SPAN><BR><pre><code class="language-csharp"><a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a> cat = new <a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a>(Doc.ObjectSoup.Catalog);
cat.EntryAcroForm.EntrySigFlags = 3;

// NB If you don&#39;t want your signature to print then set the /F flag to 0
int fieldID = Doc.AddObject(&quot;&lt;&lt;/Type /Annot /Subtype /Widget /F 4 /FT /Sig /DA (/TimesRoman 0 Tf 0 g)&gt;&gt;&quot;);
<a href="../../1416-widgetannotationelement/default.htm">WidgetAnnotationElement</a> widget = new <a href="../../1416-widgetannotationelement/default.htm">WidgetAnnotationElement</a>(Doc.ObjectSoup[fieldID]);
<a href="../../1454-signaturefieldelement/default.htm">SignatureFieldElement</a> field = (<a href="../../1454-signaturefieldelement/default.htm">SignatureFieldElement</a>)widget.FieldElement;

FormField formField = new FormField(this, inName, field.Object.ID);
formField.Widget.Rect = new XRect(inRect);

if (mSig == null)
&nbsp;&nbsp;Doc.Form.Refresh();
else {
&nbsp;&nbsp;string sigName = mSig.Name;
&nbsp;&nbsp;Doc.Form.Refresh();
&nbsp;&nbsp;mSig = (Signature)Doc.Form[sigName];
}

if (inAppearanceText != null) {
&nbsp;&nbsp;XRect rect = widget.EntryRect.GetRect();
&nbsp;&nbsp;rect.Pin = XRect.Corner.TopLeft;
&nbsp;&nbsp;rect.Width = 200; // Change this to fit the Text
&nbsp;&nbsp;rect.Height = 60; // Change this to fit the Text
&nbsp;&nbsp;widget.EntryRect.SetRect(rect);
&nbsp;&nbsp;rect.Pin = XRect.Corner.BottomLeft;
&nbsp;&nbsp;rect.Position(0, 0);

&nbsp;&nbsp;int fontSize = 12;
&nbsp;&nbsp;string theRect = Doc.Rect.String;
&nbsp;&nbsp;int theFont = Doc.Font;
&nbsp;&nbsp;int theFontSize = Doc.FontSize;
&nbsp;&nbsp;double charSpacing = Doc.TextStyle.CharSpacing;
&nbsp;&nbsp;double lineSpacing = Doc.TextStyle.LineSpacing;
&nbsp;&nbsp;int pageID = Doc.Page;

&nbsp;&nbsp;// Use a detached page to avoid changes to the current page
&nbsp;&nbsp;// or to the page tree for a new page
&nbsp;&nbsp;Doc.Page = Doc.AddObject(&quot;&lt;&lt;/Type /Page /MediaBox [&quot; + rect.String + &quot;] &gt;&gt;&quot;);
&nbsp;&nbsp;Doc.Rect.String = rect.String;

&nbsp;&nbsp;int fontID = Doc.AddFont(&quot;Times-Roman&quot;);
&nbsp;&nbsp;Doc.Font = fontID;
&nbsp;&nbsp;Doc.FontSize = fontSize;
&nbsp;&nbsp;Doc.TextStyle.CharSpacing = 0;
&nbsp;&nbsp;Doc.TextStyle.LineSpacing = 2;
&nbsp;&nbsp;int textID = Doc.AddText(inAppearanceText);
&nbsp;&nbsp;string textStream = Doc.GetInfo(textID, &quot;Stream&quot;);
&nbsp;&nbsp;Doc.Delete(textID);
&nbsp;&nbsp;int l1 = textStream.IndexOf(&quot;/Fabc&quot;, 0, textStream.Length);
&nbsp;&nbsp;int l2 = textStream.IndexOf(&quot; &quot;, l1, textStream.Length - l1);
&nbsp;&nbsp;string fontResName = textStream.Substring(l1 + 1, l2 - l1 - 1);

&nbsp;&nbsp;Doc.Delete(Doc.Page);
&nbsp;&nbsp;Doc.Page = pageID;
&nbsp;&nbsp;Doc.Rect.String = theRect;
&nbsp;&nbsp;Doc.Font = theFont;
&nbsp;&nbsp;Doc.FontSize = theFontSize;
&nbsp;&nbsp;Doc.TextStyle.CharSpacing = charSpacing;
&nbsp;&nbsp;Doc.TextStyle.LineSpacing = lineSpacing;

&nbsp;&nbsp;widget.EntryAP = new <a href="../default.htm">AppearanceElement</a>(widget);
&nbsp;&nbsp;widget.EntryAP.EntryN = MakeAppearance(rect, null, 0, fontResName, fontID, textStream);
}

return formField;
</code></pre></P>
<P><SPAN class=language>[VB]</SPAN><BR><pre><code class="language-vbnet">Dim cat As New <a href="../../../07-syntax/1081-catalogelement/default.htm">CatalogElement</a>(Doc.ObjectSoup.Catalog)
cat.EntryAcroForm.EntrySigFlags = 3

&#39; NB If you don&#39;t want your signature to print then set the /F flag to 0
Dim fieldID As Integer = Doc.AddObject(&quot;&lt;&lt;/Type /Annot /Subtype /Widget /F 4 /FT /Sig /DA (/TimesRoman 0 Tf 0 g)&gt;&gt;&quot;)
Dim widget As New <a href="../../1416-widgetannotationelement/default.htm">WidgetAnnotationElement</a>(Doc.ObjectSoup(fieldID))
Dim field As <a href="../../1454-signaturefieldelement/default.htm">SignatureFieldElement</a> = CType(widget.FieldElement, <a href="../../1454-signaturefieldelement/default.htm">SignatureFieldElement</a>)

Dim formField As New FormField(Me, inName, field.Object.ID)
formField.Widget.Rect = New XRect(inRect)

If mSig Is Nothing Then
&nbsp;&nbsp;Doc.Form.Refresh()
Else
&nbsp;&nbsp;Dim sigName As String = mSig.Name
&nbsp;&nbsp;Doc.Form.Refresh()
&nbsp;&nbsp;mSig = CType(Doc.Form(sigName), Signature)
End If

If inAppearanceText IsNot Nothing Then
&nbsp;&nbsp;Dim rect As XRect = widget.EntryRect.GetRect()
&nbsp;&nbsp;rect.Pin = XRect.Corner.TopLeft
&nbsp;&nbsp;rect.Width = 200 &#39; Change this to fit the Text
&nbsp;&nbsp;rect.Height = 60 &#39; Change this to fit the Text
&nbsp;&nbsp;widget.EntryRect.SetRect(rect)
&nbsp;&nbsp;rect.Pin = XRect.Corner.BottomLeft
&nbsp;&nbsp;rect.Position(0, 0)

&nbsp;&nbsp;Dim fontSize As Integer = 12
&nbsp;&nbsp;Dim theRect As String = Doc.Rect.String
&nbsp;&nbsp;Dim theFont As Integer = Doc.Font
&nbsp;&nbsp;Dim theFontSize As Integer = Doc.FontSize
&nbsp;&nbsp;Dim charSpacing As Double = Doc.TextStyle.CharSpacing
&nbsp;&nbsp;Dim lineSpacing As Double = Doc.TextStyle.LineSpacing
&nbsp;&nbsp;Dim pageID As Integer = Doc.Page

&nbsp;&nbsp;&#39; Use a detached page to avoid changes to the current page
&nbsp;&nbsp;&#39; or to the page tree for a new page
&nbsp;&nbsp;Doc.Page = Doc.AddObject(&quot;&lt;&lt;/Type /Page /MediaBox [&quot; &amp; rect.String &amp; &quot;] &gt;&gt;&quot;)
&nbsp;&nbsp;Doc.Rect.String = rect.String

&nbsp;&nbsp;Dim fontID As Integer = Doc.AddFont(&quot;Times-Roman&quot;)
&nbsp;&nbsp;Doc.Font = fontID
&nbsp;&nbsp;Doc.FontSize = fontSize
&nbsp;&nbsp;Doc.TextStyle.CharSpacing = 0
&nbsp;&nbsp;Doc.TextStyle.LineSpacing = 2
&nbsp;&nbsp;Dim textID As Integer = Doc.AddText(inAppearanceText)
&nbsp;&nbsp;Dim textStream As String = Doc.GetInfo(textID, &quot;Stream&quot;)
&nbsp;&nbsp;Doc.Delete(textID)
&nbsp;&nbsp;Dim l1 As Integer = textStream.IndexOf(&quot;/Fabc&quot;, 0, textStream.Length)
&nbsp;&nbsp;Dim l2 As Integer = textStream.IndexOf(&quot; &quot;, l1, textStream.Length - l1)
&nbsp;&nbsp;Dim fontResName As String = textStream.Substring(l1 + 1, l2 - l1 - 1)

&nbsp;&nbsp;Doc.Delete(Doc.Page)
&nbsp;&nbsp;Doc.Page = pageID
&nbsp;&nbsp;Doc.Rect.String = theRect
&nbsp;&nbsp;Doc.Font = theFont
&nbsp;&nbsp;Doc.FontSize = theFontSize
&nbsp;&nbsp;Doc.TextStyle.CharSpacing = charSpacing
&nbsp;&nbsp;Doc.TextStyle.LineSpacing = lineSpacing

&nbsp;&nbsp;widget.EntryAP = New <a href="../default.htm">AppearanceElement</a>(widget)
&nbsp;&nbsp;widget.EntryAP.EntryN = MakeAppearance(rect, Nothing, 0, fontResName, fontID, textStream)
End If

Return formField
</code></pre></P>

            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
