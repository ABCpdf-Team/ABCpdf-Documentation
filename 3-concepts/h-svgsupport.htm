<html>
<head>
<title>SVG to PDF Import</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="../mystyles.css">
<link rel="stylesheet" href="../prism.css">
<script src="../prism.js"></script></head>

<body bgcolor="#FFFFFF">
<table border="0" cellpadding="0" cellspacing="4">
  <tr>
    <td valign="top"><img src="../images/goo.gif" width="58" height="60"></td>
    <td width="14">&nbsp;</td>
    <td>
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td class="pageheader"> SVG to PDF Import</td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
        <tr>
          <td background="../images/steel-line-3.gif" height="11"></td>
          <td background="../images/steel-line-3.gif" height="11" width="60"></td>
          <td height="11"><img src="../images/steel-blob-11.gif" width="11" height="11"></td>
        </tr>
        <tr>
          <td>
            <p>&nbsp;</p>          </td>
          <td width="60">&nbsp;</td>
          <td>&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Intro</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>When you use Doc.Read to import SVG content, ABCpdf uses its own native SVG import functionality. This is very fast and controllable and produces a very direct rendition of the SVG structures in terms of the PDF output. For SVG Tiny compliant input it is the best option.</p>
              <p>The alternative is to use AddImageUrl/Html with one of the HTML engines. If you use an engine like ABCChrome the SVG rendering engine is extremely full featured. For complex SVG content including features outside the SVG Tiny specification it is the best option.</p>
          <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      SVG Tiny</td>
    <td width="14">&nbsp;</td>
    <td valign="top">
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td>
            <p>ABCpdf supports a subset of SVG based around the SVG Tiny specification.            </p>
            <p>It does not support all the features of SVG Tiny because some features
              do not easily map through to equivalents in the PDF format. However
              it supports some features outside SVG Tiny to cover common usage
              in real world (non SVG Tiny) documents.</p>
            <p>So what are the key differences between ABCpdf SVG and SVG Tiny?</p>
            <p>&nbsp;</p>          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Content</td>
    <td width="14">&nbsp;</td>
    <td valign="top">
      <table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td>
            <p>PDF is essentially a static medium. </p>
            <p>ABCpdf supports the import of static content.</p>
            <p>However it does not import dynamic SVG content such as animations,
              videos and scripts.</p>
            <p>&nbsp;</p>          </td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
      </table>    </td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Text</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>ABCpdf supports external fonts referenced in SVG. </p>
              <p>However it is also possible to embed fonts in an SVG file using
                a set of tags defining the path for each glyph. ABCpdf does not
                support this type of embedded font.</p>
            <p>Some text styles such as light weights and font variants are not
              easily represented in PDF. For this reason ABCpdf may approximate
              them if they are used.</p>
            <p>ABCpdf does not support the display-align property of the textarea
              element. However this is an element which is very rarely used (it
              is part of the new SVG 1.2 draft specification) and is not widely
              supported.</p>
            <p>SVG Basic allows text in individual tspan blocks to be individually
              positioned attributes using x, y, dx and dy attributes. Because
              this is not part of SVG Tiny ABCpdf does not support it. However
              it is worth noting that this is perhaps the most commonly used text
              construct outside the specification.</p>
            <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Colors</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>ABCpdf supports standard RGB web colors.</p>
            <p>However it also supports device-rgb, device-rgb and device-cmyk which map through the corresponding color spaces in PDF.</p>
            <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Links</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>Links are only supported for text elements within anchor elements.</p>
            <p>Internal document links are not currently supported.</p>
            <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      Gradients</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>In SVG it is possible to specify opacity values for the stop-colors of gradients. </p>
              <p>Unfortunately this is not possible in PDF. </p>
              <p>As such ABCpdf substitutes transparent stop-colors with brighter solid stop-colors.</p>
              <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
  <tr>
    <td valign="top" class="sectheader"><img src="../images/steel-pin.gif" width="64" height="10"><br>
      CSS</td>
    <td>&nbsp;</td>
    <td valign="top"><table border="0" width="100%" cellpadding="0" cellspacing="0">
        <tr>
          <td><p>Although it is not a part of SVG Tiny, ABCpdf supports a simplified CSS system. </p>
            <p>This is useful because a large number of real world SVG documents use simple CSS selectors.</p>
            <p>ABCpdf supports simple type selectors in internal style sheets. ABCpdf supports external style sheets as long as they are on the local file system. </p>
            <p>However ABCpdf skips &quot;import&quot; and &quot;media&quot; CSS directives when parsing the style sheet itself. </p>
            <p>&nbsp;</p></td>
          <td width="60">&nbsp;</td>
          <td width="11">&nbsp;</td>
        </tr>
    </table></td>
  </tr>
</table>
<p>&nbsp;</p>
</body>
</html>
