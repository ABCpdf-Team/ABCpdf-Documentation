<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>ArrayAtom FromContentStream Function. Create an array of Atoms from a byte array containing a sequence of PDF objects. ABCpdf .NET PDF Library.</TITLE>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="../../../mystyles.css">
<link rel="stylesheet" href="../../../prism.css">
<script src="../../../prism.js"></script>
<META content="MSHTML 6.00.6000.16809" name=GENERATOR></HEAD>
<BODY bgColor=#ffffff>
<TABLE cellSpacing=4 cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top><IMG height=60 src="../../../images/goo.gif" width=58></TD>
    <TD width=14>&nbsp;</TD>
    <TD>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD class=pageheader>FromContentStream Function</TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR>
        <TR>
          <TD background=../../../images/steel-line-3.gif height=11></TD>
          <TD width=60 background=../../../images/steel-line-3.gif 
          height=11></TD>
          <TD height=11><IMG height=11 src="../../../images/steel-blob-11.gif" 
            width=11></TD></TR>
        <TR>
          <TD>
            <P>Create an array of Atoms from a byte array containing a sequence of PDF objects</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Syntax</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <P><SPAN class=language>[C#]</SPAN><BR>
            <CODE>static <a href="../default.htm">ArrayAtom</a> FromContentStream(string text)<br>
             static <a href="../default.htm">ArrayAtom</a> FromContentStream(byte[] data)<br>
             static ArrayAtom FromContentStream(byte[] value, out IList&lt;int&gt; offsets)<BR>
            </CODE><BR><SPAN class=language>[Visual 
            Basic]</SPAN><BR>
            <CODE>Shared Function FromContentStream(text As String) As <a href="../default.htm">ArrayAtom</a><br>
             Shared Function FromContentStream(data() As Byte) As <a href="../default.htm">ArrayAtom</a><br>
             Shared Function FromContentStream(data() As Byte, Out IList&lt;int&gt; offsets) As <a href="../default.htm">ArrayAtom</a><BR>
            </CODE></P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Params</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top>
            <TABLE class=wsgtable borderColor=#ffffff cellSpacing=0 
            cellPadding=3 border=5>
              <TBODY>
              <TR>
                <TD align=middle><B>Name</B></TD>
                <TD><B>Description</B></TD></TR>
              <TR vAlign=top>
                <TD align=middle>text</TD>
                <TD>A string holding a sequence of atoms.</TD>
              </TR>
              <TR vAlign=top>
                <TD align=middle>data</TD>
                <TD>A chunk of data  holding the sequence of atoms.</TD>
              </TR>
              <TR vAlign=top>
                <TD align=middle>offsets</TD>
                <TD>The byte offsets in the data for the start each of atom in the returned array.</TD>
              </TR>
              <TR vAlign=top>
                <TD align=middle>return</TD>
                <TD>An ArrayAtom holding the atoms in the content stream.</TD>
              </TR>
</TBODY></TABLE>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Notes</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>Create an array of Atoms from a byte array containing a sequence of PDF objects.</P>
            <P>This method is useful for deconstructing PDF content streams for analysis and modification. To convert back into a content stream you can use the <a href="../../1-atom/1-methods/getdata.htm">Atom.GetData</a> function.</P>
            <P>The returned offsets relate to the byte offsets for the start of each atom in the  array that is returned.</P>
            <P>&nbsp;</P></TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=sectheader vAlign=top><IMG height=10 
      src="../../../images/steel-pin.gif" width=64><BR>Example</TD>
    <TD width=14>&nbsp;</TD>
    <TD vAlign=top>
      <TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
        <TBODY>
        <TR>
          <TD>
            <P>This example shows how to use the FromContentStream function to parse and display a PDF content stream.</P>
            <P><span class=language>[C#]</span><br>
              <pre><code class="language-csharp">var sb = new StringBuilder();
using (var doc = new Doc()) {
&nbsp;&nbsp;doc.Read(Server.MapPath("spaceshuttle.pdf"));
&nbsp;&nbsp;var page = doc.ObjectSoup[doc.Page] as Page;
&nbsp;&nbsp;var array = ArrayAtom.FromContentStream(page.GetContentData());
&nbsp;&nbsp;int indent = 0;
&nbsp;&nbsp;var indentPlus = new HashSet&lt;string&gt;(new string[] { "q", "BT" });
&nbsp;&nbsp;var indentMinus = new HashSet&lt;string&gt;(new string[] { "Q", "ET" });
&nbsp;&nbsp;var items = OpAtom.Find(array);
&nbsp;&nbsp;int index = 0;
&nbsp;&nbsp;foreach (var pair in items) {
&nbsp;&nbsp;&nbsp;&nbsp;string op = ((OpAtom)array[pair.Item2]).Text;
&nbsp;&nbsp;&nbsp;&nbsp;// add indent to code
&nbsp;&nbsp;&nbsp;&nbsp;if (indentMinus.Contains(op))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent--;
&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; indent; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ");
&nbsp;&nbsp;&nbsp;&nbsp;// write out the operators
&nbsp;&nbsp;&nbsp;&nbsp;for (int i = index; i &lt;= pair.Item2; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != index)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var item = array[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// we write arrays out individually so that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// we can override default cr lf behavior
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var itemArray = item as ArrayAtom;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (itemArray != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n = itemArray.Count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append("[");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int j = 0; j &lt; n; j++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(itemArray[j].ToString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j != n - 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append("]");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(item.ToString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;sb.AppendLine();
&nbsp;&nbsp;&nbsp;&nbsp;if (indentPlus.Contains(op))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent++;
&nbsp;&nbsp;&nbsp;&nbsp;index = pair.Item2 + 1;
&nbsp;&nbsp;}
&nbsp;&nbsp;// write out any atoms that are left over
&nbsp;&nbsp;for (int i = index; i &lt; array.Count; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ");
&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(array[i].ToString());
&nbsp;&nbsp;}
}
using (var doc = new Doc()) {
&nbsp;&nbsp;doc.Font = doc.AddFont("Courier");
&nbsp;&nbsp;doc.Rect.Inset(20, 20);
&nbsp;&nbsp;doc.AddText(sb.ToString());
&nbsp;&nbsp;doc.Save(Server.MapPath("PageContents.pdf"));
}
</code></pre><br>
              <span class=language>[Visual Basic]</span><br>
              <pre><code class="language-vbnet">Dim sb As New StringBuilder()
Using doc As New Doc()
&nbsp;&nbsp;doc.Read(Server.MapPath("spaceshuttle.pdf"))
&nbsp;&nbsp;Dim page As Page = TryCast(doc.ObjectSoup(doc.Page), Page)
&nbsp;&nbsp;Dim array As ArrayAtom = ArrayAtom.FromContentStream(page.GetContentData())
&nbsp;&nbsp;Dim indent As Integer = 0
&nbsp;&nbsp;Dim indentPlus As New HashSet(Of String)(New String() {"q", "BT"})
&nbsp;&nbsp;Dim indentMinus As New HashSet(Of String)(New String() {"Q", "ET"})
&nbsp;&nbsp;Dim items As IList(Of Tuple(Of String, Integer)) = OpAtom.Find(array)
&nbsp;&nbsp;Dim index As Integer = 0
&nbsp;&nbsp;For Each pair As var In items
&nbsp;&nbsp;&nbsp;&nbsp;Dim op As String = DirectCast(array(pair.Item2), OpAtom).Text
&nbsp;&nbsp;&nbsp;&nbsp;' add indent to code
&nbsp;&nbsp;&nbsp;&nbsp;If indentMinus.Contains(op) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Decrement(indent),indent + 1)
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;Dim i As Integer = 0
&nbsp;&nbsp;&nbsp;&nbsp;While i &lt; indent
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
&nbsp;&nbsp;&nbsp;&nbsp;End While
&nbsp;&nbsp;&nbsp;&nbsp;' write out the operators
&nbsp;&nbsp;&nbsp;&nbsp;Dim i As Integer = index
&nbsp;&nbsp;&nbsp;&nbsp;While i &lt;= pair.Item2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If i &lt;&gt; index Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim item As Atom = array(i)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' we write arrays out individually so that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' we can override default cr lf behavior
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim itemArray As ArrayAtom = TryCast(item, ArrayAtom)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If itemArray &lt;&gt; Nothing Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim n As Integer = itemArray.Count
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append("[")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim j As Integer = 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;While j &lt; n
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(itemArray(j).ToString())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If j &lt;&gt; n - 1 Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(j),j - 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End While
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append("]")
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(item.ToString())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
&nbsp;&nbsp;&nbsp;&nbsp;End While
&nbsp;&nbsp;&nbsp;&nbsp;sb.AppendLine()
&nbsp;&nbsp;&nbsp;&nbsp;If indentPlus.Contains(op) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(indent),indent - 1)
&nbsp;&nbsp;&nbsp;&nbsp;End If
&nbsp;&nbsp;&nbsp;&nbsp;index = pair.Item2 + 1
&nbsp;&nbsp;Next
&nbsp;&nbsp;' write out any atoms that are left over
&nbsp;&nbsp;Dim i As Integer = index
&nbsp;&nbsp;While i &lt; array.Count
&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(" ")
&nbsp;&nbsp;&nbsp;&nbsp;sb.Append(array(i).ToString())
&nbsp;&nbsp;&nbsp;&nbsp;System.Math.Max(System.Threading.Interlocked.Increment(i),i - 1)
&nbsp;&nbsp;End While
End Using
Using doc As New Doc()
&nbsp;&nbsp;doc.Font = doc.AddFont("Courier")
&nbsp;&nbsp;doc.Rect.Inset(20, 20)
&nbsp;&nbsp;doc.AddText(sb.ToString())
&nbsp;&nbsp;doc.Save(Server.MapPath("PageContents.pdf"))
End Using
</code></pre></P>
            <p><img src="../../../images/pdf/pagecontents.pdf.png" class="example"><BR>
              PageContents.pdf</p>
            </TD>
          <TD width=60>&nbsp;</TD>
          <TD width=11>&nbsp;</TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<P>&nbsp;</P></BODY></HTML>
